@using System.ComponentModel.DataAnnotations
@model ABankAdmin.ViewModels.CIFInfo
@{
    ViewBag.Title = "cifinfo";
}

<h3>THE ICONIC Registration</h3>
<Style>
    .table-wrapper {
        position: relative;
        max-height: 450px;
        overflow: auto;
    }

    thead tr th {
        text-align: center;
    }
</Style>
@using (Html.BeginForm("Create", "CIFInfoModels", FormMethod.Post, new { autocomplete = "off", @id = "create" }))
{
    @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <hr />
            @if (!ViewContext.ViewData.ModelState.IsValid)
            {
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            }
            <div class="row">
                @Html.LabelFor(model => model.uservm.CIFID, htmlAttributes: new {@class = "control-label col-md-2", @style = "width:20%" })
                <div class="form-group col-md-5">
                    @Html.EditorFor(model => model.uservm.CIFID, new {htmlAttributes = new {@class = "form-control", required = "required", maxlength = "20"}})
                    @Html.ValidationMessageFor(model => model.uservm.CIFID, "", new {@class = "text-danger"})

                </div>
                <div class="form-group col-md-2" style="margin-left: -1px;">
                    <button type="button" class="btn btn-default" onclick="check()">Fetch</button>
                </div>
                </div>
            <div class="row">
                @Html.LabelFor(model => model.uservm.USERTYPECODE, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                <div class="form-group col-md-5">
                        @Html.DropDownListFor(model => model.uservm.USERTYPECODE,
                    (IEnumerable<SelectListItem>)ViewBag.UserType,
                    "Select THE ICONIC Tier", new { @class = "form-control", @id = "usertypelist" })
                        @Html.HiddenFor(model => model.uservm.USERTYPE, new { @id = "usertype" })
                        @Html.ValidationMessageFor(model => model.uservm.USERTYPECODE, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-offset-2 col-md-10" style="margin-left: 20%">
                        <div class="checkbox" style="padding-left: 9px; margin-top: 0px;">
                            @Html.CheckBoxFor(model => model.uservm.Iconic, new { @id = "chkIconic", @onclick = "showBooking()" })
                            @Html.ValidationMessageFor(model => model.uservm.Iconic, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => model.uservm.Iconic, htmlAttributes: new { @style = "padding-left: 0px;" })
                        </div>
                    </div>
            </div>
                <div class="row" style="display: none" id="bookinglist">
                    @Html.LabelFor(model => model.uservm.IconicBooking, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                    <div class="form-group col-md-5">
                        @Html.DropDownListFor(model => model.uservm.IconicBooking,
                    (IEnumerable<SelectListItem>)ViewBag.Booking,
                    "Select Reserved Number", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.uservm.IconicBooking, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    @Html.LabelFor(model => model.uservm.NAME, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                    <div class="form-group col-md-5">
                        @Html.EditorFor(model => model.uservm.NAME, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.uservm.NAME, "", new { @class = "text-danger" })
                    </div>
                </div>
            
                <div class="row">
                    @Html.LabelFor(model => model.uservm.PHONENO, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                    <div class="form-group col-md-5">
                        @Html.EditorFor(model => model.uservm.PHONENO, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.uservm.PHONENO, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    @Html.LabelFor(model => model.uservm.NRC, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                    <div class="form-group col-md-5">
                        @Html.EditorFor(model => model.uservm.NRC, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.uservm.NRC, "", new { @class = "text-danger" })
                    </div>
                </div>
            <div class="row">
                @Html.LabelFor(model => model.uservm.Address, htmlAttributes: new {@class = "control-label col-md-2", @style = "width:20%" })
                <div class="form-group col-md-5">
                    @Html.TextAreaFor(model => model.uservm.Address, new {@class = "form-control", @readonly = "readonly"})
                    @Html.ValidationMessageFor(model => model.uservm.Address, "", new {@class = "text-danger"})
                </div>
            </div>
            
               <div class="row">
                    @Html.LabelFor(model => model.uservm.strEffectiveDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                    <div class="form-group col-md-5">
                        <div class='input-group date' id="Effectivedate">
                            @Html.TextBoxFor(model => model.uservm.strEffectiveDate, new { @class = "form-control", placeholder = "Effective Date", autocomplete = "off", id = "effectDate" })
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar" @*onclick="OpenDate('#effectDate')"*@></span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.uservm.strEffectiveDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            <div class="row">
                @Html.LabelFor(model => model.uservm.strEXPIREDATE, htmlAttributes: new {@class = "control-label col-md-2", @style = "width:20%" })
                <div class="form-group col-md-5">
                    <div class='input-group date' id="Expireddate">
                        @Html.TextBoxFor(model => model.uservm.strEXPIREDATE, new {@class = "form-control", placeholder = "Expire Date", autocomplete = "off", id = "expDate"})
                        <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                    </div>
                    @*@Html.HiddenFor(model => model.uservm.EffectiveDate, new { id = "effdate" })*@
                    @Html.ValidationMessageFor(model => model.uservm.strEXPIREDATE, "", new {@class = "text-danger"})
                </div>
            </div>
            
            <div class="row">
                @Html.LabelFor(model => model.uservm.BranchName, htmlAttributes: new {@class = "control-label col-md-2", @style = "width:20%" })
                <div class="form-group col-md-5">
                    @Html.EditorFor(model => model.uservm.BranchName, new {htmlAttributes = new {@class = "form-control", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.uservm.BranchName, "", new {@class = "text-danger"})
                </div>
            </div>
            
                <div class="row">
                    @Html.LabelFor(model => model.uservm.RMName, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                    <div class="form-group col-md-5">
                        @Html.DropDownListFor(model => model.uservm.RMID,
                    (IEnumerable<SelectListItem>)ViewBag.RMList,
                    "Select RM", new { @class = "form-control", @id = "rmlist" })
                        @Html.HiddenFor(model => model.uservm.RMName, new { @id = "rmname" })
                        @Html.ValidationMessageFor(model => model.uservm.RMID, "", new {@class = "text-danger"})
                    </div>
                </div>
            <div class="row">
                @Html.LabelFor(model => model.uservm.RMID, htmlAttributes: new { @class = "control-label col-md-2", @style = "width:20%" })
                <div class="form-group col-md-5">
                    @Html.EditorFor(model => model.uservm.RMID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" ,@id="rmID"} })
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(model => model.uservm.REMARK, htmlAttributes: new {@class = "control-label col-md-2", @style = "width:20%" })
                <div class="form-group col-md-5">
                    @Html.EditorFor(model => model.uservm.REMARK, new {htmlAttributes = new {@class = "form-control"}})
                    @Html.ValidationMessageFor(model => model.uservm.REMARK, "", new {@class = "text-danger"})
                </div>
            </div>

                <br />
                <div class="form-group col-md-12">
                    <div style="padding-left: 35px;">
                        @*class="col-md-offset-2 col-md-10"*@
                        <input type="submit" id="btnSubmit" value="Register" class="btn btn-success" />
                        @Html.ActionLink("Cancel", null, null, null, new { href = Request.UrlReferrer, @class = "btn btn-default" })
                        <br />
                    </div>
                </div>
            </div>
}

<div class="modal modal-danger" id="divError">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Getting Retail User</h4>
            </div>
            <div class="modal-body">
                <p id="pMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline pull-left" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<div class="modal modal-danger" id="divErrorForiconictype">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Getting Iconic Number</h4>
            </div>
            <div class="modal-body">
                <p>Something went wrong!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline pull-left" data-dismiss="modal" onclick="window.location = '/CIFInfoModels/Index';">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<div>
    @*@Html.ActionLink("Back to List", "Index")*@
    <br /><br />
</div>
@section Scripts {
    <script src="~/Scripts/bootstrap-datepicker.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/CIFInfo")
@if(ViewBag.CifError != null)
    {
    <script type="text/javascript">
            window.onload = function () {
                var $confirm = $("#divErrorForiconictype");
                $confirm.show();
            }
    </script>
}
    <script type="text/javascript">
        $('#usertypelist').on('change', function() {
            if (this.value != null) {
                $('#usertype').val($("#usertypelist option:selected").text());
                $('#codelimit').val(this.value);
                var iconic = this.value;
                $("#uservm_IconicBooking").empty();
                $(".field-validation-error").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetBookingListByIconicType")',
                    dataType: 'json',
                    data: { iconic: iconic },
                    success: function(state) {

                        $.each(state, function(i, state) {
                            $("#uservm_IconicBooking").append('<option value="'
                                + state.Value + '">'
                                + state.Text + '</option>');
                        });
                    },
                    error: function(xhr, ajaxError, thrown) {
                        if (xhr.status == 302) {
                            window.location.href = "/Admin/Login";
                        }
                    }
                });
                return false;


            };
        });

        $('#uservm_IconicBooking').on('change', function () {
            $(".field-validation-error").empty();
        });
        $(function() {
            $("#Expireddate").datetimepicker({
                format: 'MM/YY'
            });

            $("#Effectivedate").datetimepicker({
                format: 'MM/YY'

            });

            //GetMonthYearPicker("#Effectivedate");

        });
        $('#rmlist').on('change', function () {
            if (this.value != null) {
                $("#uservm_RMID").empty();
                $(".field-validation-error").empty();
                $('#rmID').val(this.value);
                $('#rmname').val($("#rmlist option:selected").text());
               
                
            };
        });

        //$('#Effectivedate').datepicker({
        //    format: 'yyyy-mm'
        //});
        $(function() {
            var selected = $('#bookinglist option:selected'), // Seems to be unused
                $busy = $('#chkIconic'), // Always cache your queries
                $dropdown = $('#bookinglist'); // Caching queries

            $dropdown.hide(); // Hidden by default initially

            $busy.change(function() {
                if ($busy.prop('checked')) {
                    $dropdown.show().focus().click();
                } else {
                    $busy.prop('checked', false);
                    $dropdown.blur().hide();
                }
            });

            $busy.change(); // This sets initial state
        });

        function showBooking() {
            if (!$(this).is(':checked')) {
                $('#bookinglist').css('display', 'block');
            }
        }
    </script>


}




