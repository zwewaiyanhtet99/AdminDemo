@model ABankAdmin.ViewModels.ReqCorporateVM
@{
    ViewBag.Title = "Register";
}

<h2>Create</h2>
<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        -webkit-box-shadow: 0px 0px 0px 0px #000;
        box-shadow: 0px 0px 0px 0px #000;
    }

    legend.scheduler-border {
        font-size: 1.2em !important;
        font-weight: bold !important;
        text-align: left !important;
        width: auto;
        padding: 0 10px;
        border-bottom: none;
    }
</style>

@using (Html.BeginForm("Register", "Corporate", FormMethod.Post, new { autocomplete = "off" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Request Corporate</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CIFID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CIFID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CIFID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            <div class="col-md-offset-2 col-md-8">
                <button type="button" class="btn btn-default" onclick="check()">Fetch</button>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Company_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Company_Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Company_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Company_Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Company_Email, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control"@*, @readonly = "readonly"*@}
})
                @Html.ValidationMessageFor(model => model.Company_Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Company_Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Company_Phone, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control",
                        @onkeypress = "return isNumberKey(this, event);",
                    }
    })
                @Html.ValidationMessageFor(model => model.Company_Phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Company_Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Company_Address, new { @class = "form-control", @style = "height:70px;" })
                @Html.ValidationMessageFor(model => model.Company_Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Branch,
                                     (IEnumerable<SelectListItem>)ViewBag.BranchList,
                                    "--Select Branch--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Country, ViewBag.Country as List<SelectListItem>, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.State, ViewBag.State as List<SelectListItem>, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ISVIP, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.ISVIP)
                @Html.ValidationMessageFor(model => model.ISVIP, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group OnlyVIP">
            @Html.LabelFor(model => model.T_CHARGES_CODE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.T_CHARGES_CODE, ViewBag.TransferChargesCode as List<SelectListItem>, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.T_CHARGES_CODE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group OnlyVIP">
            @Html.LabelFor(model => model.R_CHARGES_CODE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.R_CHARGES_CODE, ViewBag.RemittanceChargesCode as List<SelectListItem>, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.R_CHARGES_CODE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tran_Limit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.Tran_Limit == null)
                {
                    @Html.EditorFor(model => model.Tran_Limit, new { htmlAttributes = new { @class = "form-control Money", @type = "", @Value = ViewBag.CorTranValue } })
                }
                else
                {
                    @Html.EditorFor(model => model.Tran_Limit, new { htmlAttributes = new { @class = "form-control Money", @type = "" } })
                }
                @Html.ValidationMessageFor(model => model.Tran_Limit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-1 form-group"></div>

        <fieldset class="scheduler-border form-group">
            <legend class="scheduler-border"> Bulk Payment Charges</legend>
            <div class="form-group">
                @Html.Label( "OWN BANK", htmlAttributes: new { @class = "control-label  col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Bulk_Charges_Fix_Rate, new { htmlAttributes = new { @class = "form-control text-align", @onkeypress = "return isNumberKey(this, event);", @type = "" } })
                    @Html.ValidationMessageFor(model => model.Bulk_Charges_Fix_Rate, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2"></div>
                <div class="col-md-10">
                    <label>@Html.RadioButtonFor(model => model.IS_FIXRATE_BULK_CHARGES, false) Percentage </label>
                    <label>@Html.RadioButtonFor(model => model.IS_FIXRATE_BULK_CHARGES, true) Fixed Amount </label>
                </div>
            </div>
            <div class="form-group">
                @Html.Label("OTHER BANK", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CCT_BULK_CHARGES_FIX_RATE_N_PERCENT, new { htmlAttributes = new { @class = "form-control text-align col-md-10", @onkeypress = "return isNumberKey(this, event);", @type = "" } })
                    @Html.ValidationMessageFor(model => model.CCT_BULK_CHARGES_FIX_RATE_N_PERCENT, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2"></div>
                <div class="col-md-10">
                    <label>@Html.RadioButtonFor(model => model.CCT_IS_FIXRATE_BULK_CHARGES, false) Percentage </label>
                    <label>@Html.RadioButtonFor(model => model.CCT_IS_FIXRATE_BULK_CHARGES, true) Fixed Amount </label>
                </div>
            </div>
        </fieldset>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="btnSubmit" value="Register" class="btn btn-success" />
                @Html.ActionLink("Cancel", null, null, null, new { href = Request.UrlReferrer, @class = "btn btn-default" })
            </div>
        </div>
    </div>
}
<div class="modal modal-danger" id="divError">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Register Corporate</h4>
            </div>
            <div class="modal-body">
                <p id="pMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline pull-left" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/reqCorporate")
    <script type="text/javascript">
        $("input[name='IS_FIXRATE_BULK_CHARGES']").change(function () {
            $("#Bulk_Charges_Fix_Rate").val('');
        });
        $("input[name='CCT_IS_FIXRATE_BULK_CHARGES']").change(function () {
            $("#CCT_BULK_CHARGES_FIX_RATE_N_PERCENT").val('');
        });

        $(document).ready(function () {
        $("#Country").change(function () {
            $("#State").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("getState")',
                dataType: 'json',
                data: { id : $("#Country").val() },
                success: function (state) {

                    $.each(state, function (i, state) {
                        $("#State").append('<option value="'
                                                   + state.Value + '">'
                                             + state.Text + '</option>');
                    });
                },
                error: function (xhr, ajaxError, thrown) {
                    if (xhr.status == 302) {
                        window.location.href = "/Admin/Login";
                    }
                }
            });
            return false;
        })

        //show or hide at initially and after validation error
        if ($("#ISVIP")[0].checked) {
            $(".OnlyVIP").show();
        } else {
            $(".OnlyVIP").hide();
        }
        //VIP check change
        $("#ISVIP").change(function () {
            if ($("#ISVIP")[0].checked) {
                $(".OnlyVIP").show();
            } else {
                $(".OnlyVIP").hide();
                 $('#T_CHARGES_CODE').prop('selectedIndex', 0);
                 $('#R_CHARGES_CODE').prop('selectedIndex',0);
            }
        });
        });
         $("#Bulk_Charges_Fix_Rate,#CCT_BULK_CHARGES_FIX_RATE_N_PERCENT").on("keyup", function () {
                var val = this.value;
            val = val.replace(/[^0-9\.]/g, '');
            var s = val.split('.');
            //if (s[0].length > 15) {
            //    val = 0;
            //}

                if (val != "") {
                    valArr = val.split('.');
                    valArr[0] = (BigInt(valArr[0], 10)).toLocaleString();
                    val = valArr.join('.');
                }
            this.value = val;

        });
    </script>
}
