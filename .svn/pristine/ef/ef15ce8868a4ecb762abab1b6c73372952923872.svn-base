using ABankAdmin.Core.Utils;
using ABankAdmin.Models;
using ABankAdmin.ViewModels;
using Microsoft.AspNet.Identity;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Web.Mvc;

namespace ABankAdmin.Controllers
{
    public class CIFInfoForApproverController : Controller
    {
        private AdminDBContext db = new AdminDBContext();
        string controllerName = "CIFInfoForApprover";
        string connectionString = ConfigurationManager.ConnectionStrings["AdminDBContext"].ConnectionString;
        EventLogController log = new EventLogController();
        // GET: CIFInfoForApprover
        public ActionResult Index()
        {
            try
            {
                TempData["Stage"] = string.Empty;
                var data = db.CIFInfoModels.ToList();
                int count = data.Count();

                if (count > 0)
                {
                    return View(db.CIFInfoModels.ToList());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View();
        }

        [HttpPost]
        public ActionResult Index(int? arg1)
        {
            int recordsTotal = 0;
            //jQuery DataTables Param
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            //Find paging info
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            //Find order columns info
            var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault()
                                    + "][name]").FirstOrDefault();
            var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            //find search columns info
            var cifid = Request.Form.GetValues("columns[1][search][value]").FirstOrDefault();
            var username = Request.Form.GetValues("columns[2][search][value]").FirstOrDefault();
            var usertype = Request.Form.GetValues("columns[3][search][value]").FirstOrDefault();

            int pageSize = length != null ? Convert.ToInt32(length) : 10;
            int skip = start != null ? Convert.ToInt16(start) : 0;
            var rule = db.UserTypeModels.Where(r => r.DEL_FLAG == false).FirstOrDefault();
            int ruleValue = (rule == null ? 5 : rule.ID);
            var user = db.CIFInfoModels.Where(a => a.DELFLAG == false && a.Status == 0|| a.DeactivateStatus==1).ToList().ConvertAll(u => new CIFInfoVM
            {
                PHONENO = u.PHONENO,
                NAME = u.NAME,
                USERTYPE = u.USERTYPE,
                USERTYPECODE = u.USERTYPECODE,
                EXPIREDATE = u.EXPIREDATE,
                strEXPIREDATE = String.Format("{0:MM-yy}", u.EXPIREDATE),
                NRC = u.NRC,
                Address = u.ADDRESS,
                CIFID = u.CIFID,
                ID = u.ID,
                REMARK = u.REMARK,
                Createduserid = u.CREATEDUSERID,
                Status = u.Status.ToString()
            });

            //SEARCHING...

            if (!string.IsNullOrEmpty(cifid.Trim()))
            {
                user = user.Where(a => a.CIFID.ToLower().Contains(cifid.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(username.Trim()))
            {
                //int branchid = Convert.ToInt32(username);
                user = user.Where(a => a.NAME.ToLower().Contains(username.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(usertype))
            {
                //user = user.Where(a => a.USER_TYPE.Contains(usertype)).ToList();
                user = user.Where(a => a.USERTYPE == usertype).ToList();
            }

            ////SORTING...  (For sorting we need to add a reference System.Linq.Dynamic)
            if (!(string.IsNullOrEmpty(sortColumn)) && !(string.IsNullOrEmpty(sortColumnDir)))
            {
                user = user.OrderBy(sortColumn + " " + sortColumnDir).ToList();
            }
            foreach (var item in user)
            {
                if (item.Createduserid != null)
                {
                    item.Createduserid = db.Users.Where(x => x.Id == item.Createduserid).Select(x => x.UserName).FirstOrDefault();
                }
                if (item.Status == "0")
                {
                    item.Status = "Pending";
                }
                else if (item.Status == "1")
                {
                    item.Status = "Already Approved";
                }
                else if (item.Status == "2")
                {
                    item.Status = "Already Rejected";

                }

            }
            recordsTotal = user.Count();
            var data = user.Skip(skip).Take(pageSize).ToList();
            //carry pdf filename to download or null
            if (TempData["filename"] != null && TempData["filename"].ToString() != "")
                ViewBag.filename = TempData["filename"];
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data },
                JsonRequestBehavior.AllowGet);
        }

        // GET: CIFInfoForApprover/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
            if (cIFInfoModel == null)
            {
                return HttpNotFound();
            }
            return View(cIFInfoModel);
        }

        // GET: CIFInfoForApprover/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: CIFInfoForApprover/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "ID,CIFID,NAME,PHONENO,USERTYPE,USERTYPECODE,NRC,ADDRESS,REMARK,EXPIREDATE,CREATEDDATE,CREATEDUSERID,UpdatedDate,UPDATEDUSERID,DELFLAG,EFFECTIVEDATE,BRANCHNAME,RMName,RMID,Status,ApproverEmail,UserEmail")] CIFInfoModel cIFInfoModel)
        {
            if (ModelState.IsValid)
            {
                db.CIFInfoModels.Add(cIFInfoModel);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(cIFInfoModel);
        }

        // GET: CIFInfoForApprover/Edit/5
        public ActionResult Edit(int? id, string stage)
        {
            if (stage != null)
            {
                ViewBag.FromStage = stage;
                TempData["Stage"] = stage;
            }
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
            if (cIFInfoModel == null)
            {
                return HttpNotFound();
            }
            CIFInfoVMForApprover infoVm = new CIFInfoVMForApprover();
            infoVm = JsonConvert.DeserializeObject<CIFInfoVMForApprover>(JsonConvert.SerializeObject(cIFInfoModel));
            infoVm.strEXPIREDATE = infoVm.EXPIREDATE.ToString("MM/yy");
            infoVm.strEffectiveDate = infoVm.EffectiveDate.ToString("MM/yy");
            infoVm.DeactivateDate = DateTime.Now;
            if (infoVm.DeactivateDate == null)
            {
                infoVm.strDeactivateDate = null;
            }
            else
            {
                infoVm.strDeactivateDate = infoVm.DeactivateDate?.ToString("dd/MM/yyyy");
            }
            infoVm.RMEmail = (from s in db.RM_Info where s.ID == infoVm.RMID && s.DEL_FLAG == false select s.Email).SingleOrDefault();
            int RM_TL_ID = (from s in db.RM_Info where s.ID == infoVm.RMID && s.DEL_FLAG == false select s.RM_TL_ID).SingleOrDefault();
            infoVm.RM_TL_Email = (from s in db.RM_TL_Info where s.ID == RM_TL_ID && s.DEL_FLAG == false select s.Email).SingleOrDefault();
            return View(infoVm);
        }

        // POST: CIFInfoForApprover/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(CIFInfoVMForApprover infoVm)
        {
            bool isReject = false;
            try
            {

                if (ModelState.IsValid)
                {
                    #region Data preparation
                    var DbInfo = (from s in db.CIFInfoModels where s.ID == infoVm.ID && s.DELFLAG == false select s).SingleOrDefault();
                    DbInfo.UPDATEDUSERID = User.Identity.GetUserId();
                    DbInfo.UpdatedDate = DateTime.Now;
                    DbInfo.ApproverEmail = infoVm.ApproverEmail;
                    DbInfo.UserEmail = infoVm.UserEmail;
                    if (TempData["Stage"].ToString() == "Approve")
                    {
                        if (infoVm.Status == "1")
                        {
                            if (DbInfo.DeactivateStatus == 1)
                            {
                                DbInfo.DeactivateStatus = 2;
                            }
                        }
                        if (infoVm.Status == "0" || infoVm.Status=="3")
                        {
                            DbInfo.Status = 1;
                        }


                    }
                    else
                    {
                        isReject = true;
                        if (infoVm.Status == "1")
                        {
                            if (DbInfo.DeactivateStatus == 1)
                            {
                               
                                DbInfo.DeactivateStatus = 3;//Reject

                            }
                        }

                        if (infoVm.Status == "0")
                        {
                            DbInfo.Status = 2;
                        }
                        if (infoVm.Status == "3")
                        {
                            DbInfo.Status = 4;
                        }

                    }
                    if (!string.IsNullOrEmpty(infoVm.strDeactivateDate))
                    {
                        var deactivate = infoVm.strDeactivateDate.Replace("/", "-");
                        DbInfo.DeactivateDate = General.ConvertStrToDate(deactivate);
                    }
                    #endregion
                    var localEntity = db.Set<CIFInfoModel>().Local.FirstOrDefault(f => f.ID == DbInfo.ID);
                    if (localEntity != null)
                    {
                        db.Entry(localEntity).State = EntityState.Detached;
                    }
                    db.Entry(DbInfo).State = EntityState.Modified;
                    db.SaveChanges();
                }
                //save log
                if (isReject)
                {
                    ViewBag.CifRejectInfo = "\"" + infoVm.CIFID + "\"";

                }
                else
                {
                    ViewBag.CifCreateInfo = "\"" + infoVm.CIFID + "\"";
                }
               
                string getuserid = User.Identity.GetUserId();
                log.Info(getuserid, controllerName, "Edit", 2, $"{infoVm.CIFID} Creation is approved.");
                List<string> mailList = new List<string>();
                if (infoVm.RMEmail != null)
                {
                    mailList.Add(infoVm.RMEmail);
                }
                
                mailList.Add(infoVm.UserEmail);
                mailList.Add(infoVm.RM_TL_Email);
                #region sendEmail
                bool sendEmail = CIFInfoModelsController.SendEmailForIconic(mailList, infoVm.CIFID,getuserid,controllerName, "Edit");
                #endregion
                return View(infoVm);
                
            }
            catch (Exception ex)
            { throw ex; }
            return View();

        }



        // GET: CIFInfoForApprover/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
            if (cIFInfoModel == null)
            {
                return HttpNotFound();
            }
            return View(cIFInfoModel);
        }

        // POST: CIFInfoForApprover/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
            db.CIFInfoModels.Remove(cIFInfoModel);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
