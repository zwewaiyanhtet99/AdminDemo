using ABankAdmin.Core.Utils;
using ABankAdmin.Models;
using ABankAdmin.ViewModels;
using AbankAdminAPI;
using AbankAdminAPI.Models;
using CronNET;
using Microsoft.AspNet.Identity;
using Newtonsoft.Json;
using OfficeOpenXml;
using OfficeOpenXml.Table;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Linq.Dynamic;
using System.Net;
using System.Net.Mail;
using System.Web.Mvc;

namespace ABankAdmin.Controllers
{
    public class CIFInfoModelsController : Controller
    {
        private static readonly CronDaemon cron_daemon = new CronDaemon();
        private AdminDBContext db = new AdminDBContext();
        EventLogController log = new EventLogController();
        string controllerName = "CIFInfoModels";
        string connectionString = ConfigurationManager.ConnectionStrings["AdminDBContext"].ConnectionString;

        // GET: CIFInfoModels
        public ActionResult Index()
        {
            try
            {
                TempData["createReturn"] = string.Empty;
                var data = db.CIFInfoModels.ToList();
                int count = data.Count();

                if (count > 0)
                {
                    return View(db.CIFInfoModels.ToList());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View();
        }

        [HttpPost]
        public ActionResult Index(int? arg1)
        {
            int recordsTotal = 0;
            //jQuery DataTables Param
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            //Find paging info
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            //Find order columns info
            var sortColumn =
                Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault()
                                       + "][name]").FirstOrDefault();
            var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            //find search columns info
            var cifid = Request.Form.GetValues("columns[1][search][value]").FirstOrDefault();
            var username = Request.Form.GetValues("columns[2][search][value]").FirstOrDefault();
            var usertype = Request.Form.GetValues("columns[3][search][value]").FirstOrDefault();

            int pageSize = length != null ? Convert.ToInt32(length) : 10;
            int skip = start != null ? Convert.ToInt16(start) : 0;
            var rule = db.UserTypeModels.Where(r => r.DEL_FLAG == false).FirstOrDefault();
            int ruleValue = (rule == null ? 5 : rule.ID); //Only show approved status in listing
            var user =
                db.CIFInfoModels.Where(a => a.DELFLAG == false && a.Status == 1 && a.DeactivateStatus == 0)
                    .ToList()
                    .ConvertAll(u => new CIFInfoVM
                    {
                        PHONENO = u.PHONENO,
                        NAME = u.NAME,
                        USERTYPE = u.USERTYPE,
                        USERTYPECODE = u.USERTYPECODE,
                        EXPIREDATE = u.EXPIREDATE,
                        strEXPIREDATE = String.Format("{0:MM-yy}", u.EXPIREDATE),
                        NRC = u.NRC,
                        Address = u.ADDRESS,
                        CIFID = u.CIFID,
                        ID = u.ID,
                        REMARK = u.REMARK,
                        DeactivateDate = u.DeactivateDate,
                        Createduserid = u.CREATEDUSERID
                    });

            //SEARCHING...

            if (!string.IsNullOrEmpty(cifid.Trim()))
            {
                user = user.Where(a => a.CIFID.ToLower().Contains(cifid.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(username.Trim()))
            {
                //int branchid = Convert.ToInt32(username);
                user = user.Where(a => a.NAME.ToLower().Contains(username.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(usertype))
            {
                //user = user.Where(a => a.USER_TYPE.Contains(usertype)).ToList();
                user = user.Where(a => a.USERTYPE == usertype).ToList();
            }

            ////SORTING...  (For sorting we need to add a reference System.Linq.Dynamic)
            if (!(string.IsNullOrEmpty(sortColumn)) && !(string.IsNullOrEmpty(sortColumnDir)))
            {
                user = user.OrderBy(sortColumn + " " + sortColumnDir).ToList();
            }
            foreach (var item in user)
            {
                if (item.Createduserid != null)
                {
                    item.Createduserid =
                        db.Users.Where(x => x.Id == item.Createduserid).Select(x => x.UserName).FirstOrDefault();
                }
                if (item.DeactivateDate != null)
                {
                    DateTime Deactivate = Convert.ToDateTime(item.DeactivateDate);
                    item.strDeactivateDate = Deactivate.ToString("dd-MM-yyyy");
                }
                else
                {
                    item.strDeactivateDate = null;
                }
            }
            recordsTotal = user.Count();
            var data = user.Skip(skip).Take(pageSize).ToList();
            //carry pdf filename to download or null
            if (TempData["filename"] != null && TempData["filename"].ToString() != "")
                ViewBag.filename = TempData["filename"];
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data },
                JsonRequestBehavior.AllowGet);
        }

        // GET: CIFInfoModels/Details/5
        public ActionResult Details(int? id)
        {
            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            try
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                var result1 = from c in db.CIFInfoModels select c;
                CIFInfoModel cif = result1.SingleOrDefault(m => m.ID == id);
                string CIFID = cif.CIFID;

                CIFInfoVM cifvm = new CIFInfoVM();
                cifvm.CIFID = cif.CIFID;
                cifvm.NAME = cif.NAME;
                cifvm.CIFID = cif.CIFID;
                cifvm.Address = cif.ADDRESS;
                cifvm.USERTYPE = cif.USERTYPE;
                cifvm.USERTYPECODE = cif.USERTYPECODE;
                cifvm.PHONENO = cif.PHONENO;
                cifvm.REMARK = cif.REMARK;
                cifvm.EXPIREDATE = (DateTime)cif.EXPIREDATE;
                cifvm.NRC = cif.NRC;
                cifvm.strEXPIREDATE = cif.EXPIREDATE.ToString("dd-MM-yyyy");

                var AccInfos = (from a in db.Acct_InfoModels
                                where a.CIFID.Contains(CIFID) && a.ACCT_CLOSE_FLAG == false
                                orderby a.CreatedDateTime ascending
                                select new ViewModels.AccountVM
                                {
                                    CIFID = a.CIFID,
                                    ACCOUNTNO = a.ACCOUNTNO,
                                    SCHM_TYPE = a.SCHM_TYPE,
                                    SCHM_CODE = a.SCHM_CODE,
                                    AvailableAmt = a.AVAI_BALANCE.ToString(),
                                    CURRENCY = a.CURRENCY,
                                    BRANCHCODE = a.BRANCHCODE
                                });

                List<ViewModels.AccountVM> accvms = AccInfos.ToList();

                CIFInfo cIF = new CIFInfo();
                cIF.uservm = cifvm;


                if (cif == null)
                {
                    return HttpNotFound();
                }
                return View(cIF);
            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return View(ex);
            }
        }

        //getting usertype list
        private IEnumerable<SelectListItem> GetUserTypeList()
        {
            try
            {
                List<UserTypeModel> lstlist = db.UserTypeModels.Where(b => b.DEL_FLAG == false).ToList();
                IEnumerable<SelectListItem> usertypelist = lstlist.Select(b => new SelectListItem
                {
                    Value = b.USERTYPE_CODE_LIMIT.ToString(),
                    Text = b.USERTYPE

                });
                return usertypelist;
            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, "GetUserTypeList", ex);
                return null;
            }
        }

        //getting RM list
        public static IEnumerable<SelectListItem> GetRMList()
        {
            AdminDBContext db = new AdminDBContext();
            EventLogController log = new EventLogController();
            try
            {
                List<RM_Info> lstlist = db.RM_Info.Where(b => b.DEL_FLAG == false).ToList();
                IEnumerable<SelectListItem> rmlist = lstlist.Select(b => new SelectListItem
                {
                    Value = b.ID.ToString(),
                    Text = b.Name

                });
                return rmlist;
            }
            catch (Exception ex)
            {
                log.Error("", "CIFInfoModels", "GetRMList", ex);
                return null;
            }
        }

        //getting Booking list
        private IEnumerable<SelectListItem> GetBookingList()
        {
            try
            {
                List<IconicBookingModel> lstlist =
                    db.IconicBookingModels.Where(b => b.DEL_FLAG == false && b.InUse == false).ToList();
                IEnumerable<SelectListItem> bookinglist = lstlist.Select(b => new SelectListItem
                {
                    Value = b.BOOKINGNUMBER.ToString(),
                    Text = b.BOOKINGNUMBER

                });
                return bookinglist;
            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, "GetBookingList", ex);
                return null;
            }
        }

        //getting Approver email list
        public static IEnumerable<SelectListItem> GetApproverEmailList(string userID)
        {
            AdminDBContext db = new AdminDBContext();
            EventLogController log = new EventLogController();
            try
            {

                var getBranch =
                    (from s in db.Users where s.Id == userID && s.DEL_FLAG == false select s).SingleOrDefault();
                int branchid = getBranch.BranchID;
                List<AdminUser> lstemaillist =
                    db.Users.Where(b => b.DEL_FLAG == false && b.BranchID == branchid && b.Email != null && b.Role == 4)
                        .ToList();
                IEnumerable<SelectListItem> bookinglist = lstemaillist.Select(b => new SelectListItem
                {
                    Value = b.Email.ToString(),
                    Text = b.Email

                });

                return bookinglist;
            }
            catch (Exception ex)
            {
                log.Error("", "CIFInfoModels", "GetApproverEmailList", ex);
                return null;
            }
        }

        private IEnumerable<SelectListItem> GetBookingListByIconic(string iconic)
        {
            try
            {
                List<IconicBookingModel> lstlist =
                    db.IconicBookingModels.Where(
                        b => b.DEL_FLAG == false && b.InUse == false && b.BOOKINGNUMBER.StartsWith(iconic)).ToList();
                IEnumerable<SelectListItem> bookinglist = lstlist.Select(b => new SelectListItem
                {
                    Value = b.BOOKINGNUMBER.ToString(),
                    Text = b.BOOKINGNUMBER

                });
                return bookinglist;
            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, "GetBranchSelectList", ex);
                return null;
            }
        }

        public JsonResult GetBookingListByIconicType(string iconic)
        {
            try
            {
                List<SelectListItem> item = new List<SelectListItem>();
                List<IconicBookingModel> lstlist =
                    db.IconicBookingModels.Where(
                        b => b.DEL_FLAG == false && b.InUse == false && b.BOOKINGNUMBER.StartsWith(iconic)).ToList();

                item.Add(new SelectListItem { Text = "Select Reserved Number", Value = "" });
                if (lstlist.Count > 0)
                {
                    foreach (var x in lstlist)
                    {
                        item.Add(new SelectListItem { Text = x.BOOKINGNUMBER, Value = x.BOOKINGNUMBER.ToString() });
                    }
                }
                return Json(new SelectList(item, "Value", "Text", JsonRequestBehavior.AllowGet));



            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, "GetBranchSelectList", ex);
                return null;
            }
        }

        private RetailResponseInfo GetRetailResponse(string CIFID)
        {
            RetailResponseInfo rri = new RetailResponseInfo();
            try
            {
                CustomerInformationInquiry custInfoInquiry = new CustomerInformationInquiry();

                rri = custInfoInquiry.SelectCustomerInformation(CIFID, connectionString);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return rri;
        }

        //Fetch with CIFID
        public JsonResult getRetail(string CIFID)
        {
            RetailResponseInfo rri = new RetailResponseInfo();
            RetailResponseInfo_VM rri_VM = new RetailResponseInfo_VM();
            try
            {
                if (CIFID != "")
                {
                    int count = db.CIFInfoModels.Where(u => u.CIFID == CIFID & u.DELFLAG == false).Count();
                    if (count > 0)
                        return Json(new { message = "Duplicate CIFID" }, JsonRequestBehavior.AllowGet);
                    rri = GetRetailResponse(CIFID);
                    rri_VM.Name = rri.Name;
                    rri_VM.Address = rri.Address;
                    rri_VM.Currency = rri.Currency;
                    rri_VM.Manager = rri.Manager;
                    rri_VM.LeadSource = rri.LeadSource;
                    rri_VM.PhoneNumber = rri.PhoneNumber;
                    rri_VM.Minor = rri.Minor;
                    rri_VM.Gender = rri.Gender;
                    rri_VM.NRC = rri.NRC;
                    rri_VM.lAcctInfo = rri.lAcctInfo;
                    rri_VM.PrimarySolID = rri.PrimarySolID;
                    if (!string.IsNullOrEmpty(rri.PrimarySolID))
                    {
                        var branch = db.Branches.Where(x => x.code == rri.PrimarySolID && x.DEL_FLAG == false).ToList();
                        rri_VM.BranchName = branch[0].name;
                    }

                    decimal totatamount = (decimal)0.0;
                    for (int i = 0; i < rri.lAcctInfo.Count; i++)
                    {
                        totatamount += decimal.Parse(rri.lAcctInfo[i].AvailableAmt.ToString());
                    }

                    rri_VM.TotalAmt = totatamount.ToString();
                    if (rri.NRC != null && rri.lAcctInfo.Count == 0)
                        return Json(new { message = "No individual account under this CIFID" },
                            JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();

                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
            }
            return Json(rri_VM, JsonRequestBehavior.AllowGet);
        }

        // GET: CIFInfoModels/Create
        public ActionResult Create()
        {
            try
            {
                CIFInfo cifinfo = new CIFInfo();
                if (TempData["createReturn"] == "1")
                {
                    if (Session["CIFVMCreateReturn"] != null)
                    {
                        if (!string.IsNullOrEmpty(Session["CIFVMCreateReturn"].ToString()))
                        {
                            cifinfo = JsonConvert.DeserializeObject<CIFInfo>(Session["CIFVMCreateReturn"].ToString());
                            if (cifinfo.uservm.Iconic == true)
                            {
                                if (cifinfo.uservm.IconicBooking != null)
                                {
                                    IEnumerable<SelectListItem> items =
                                        db.IconicBookingModels.Where(b => b.DEL_FLAG == false && b.InUse == false)
                                            .Select(c => new SelectListItem
                                            {
                                                Selected = (c.BOOKINGNUMBER == cifinfo.uservm.IconicBooking),
                                                Value = c.BOOKINGNUMBER.ToString(),
                                                Text = c.BOOKINGNUMBER
                                            }).ToList();
                                    ViewBag.Booking = items;
                                }


                            }
                            else
                            {
                                ViewBag.Booking = GetBookingList();
                            }
                            if (cifinfo.uservm.USERTYPE != null)
                            {
                                cifinfo.uservm.USERTYPECODE = null;
                                int usertypecodelimit = (from s in db.UserTypeModels
                                                         where s.USERTYPE == cifinfo.uservm.USERTYPE && s.DEL_FLAG == false
                                                         select s.USERTYPE_CODE_LIMIT).SingleOrDefault();

                                IEnumerable<SelectListItem> items1 = db.UserTypeModels.Where(b => b.DEL_FLAG == false)
                                    .Select(c => new SelectListItem
                                    {
                                        Selected = (c.USERTYPE_CODE_LIMIT.ToString() == usertypecodelimit.ToString()),
                                        Value = c.USERTYPE_CODE_LIMIT.ToString(),
                                        Text = c.USERTYPE
                                    }).ToList();

                                ViewBag.UserType = items1;
                            }
                            else
                            {
                                ViewBag.UserType = GetUserTypeList();
                            }
                            if (cifinfo.uservm.RMID != null)
                            {
                                IEnumerable<SelectListItem> items2 = db.RM_Info.Where(b => b.DEL_FLAG == false)
                                    .Select(c => new SelectListItem
                                    {
                                        Selected = (c.ID == cifinfo.uservm.RMID),
                                        Value = c.ID.ToString(),
                                        Text = c.Name
                                    }).ToList();

                                ViewBag.RMList = items2;

                            }
                            else
                            {
                                ViewBag.RMList = GetRMList();
                            }


                        }
                    }
                }
                else
                {

                    cifinfo.uservm = new CIFInfoVM();
                    ViewBag.UserType = GetUserTypeList();
                    ViewBag.RMList = GetRMList();
                    DateTime today = DateTime.Now;
                    DateTime addDate = today.AddDays(365);
                    DateTime addDate1 = today.AddDays(30);
                    cifinfo.uservm.strEXPIREDATE = addDate.ToString("MM/yy");
                    cifinfo.uservm.strEffectiveDate = addDate1.ToString("MM/yy");
                    ViewBag.Booking = GetBookingList();
                    //cifinfo.uservm.Address = "sj";
                    //cifinfo.uservm.BranchName = "sj";
                    //cifinfo.uservm.NAME = "sj";
                    //cifinfo.uservm.NRC = "sj";
                    //cifinfo.uservm.CIFID = "R000000006";
                    //cifinfo.uservm.PHONENO = "09401581168";

                }

                return View(cifinfo);
            }
            catch (Exception ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();

                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return View("Error");
            }
        }

        // POST: CIFInfoModels/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(CIFInfo cifinfo)
        {
            TempData["create"] = "1";
            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            try
            {
                if (ModelState.IsValid)
                {
                    if (cifinfo.uservm.Iconic == true)
                    {
                        if (cifinfo.uservm.IconicBooking == null)
                        {
                            ModelState.AddModelError("uservm.IconicBooking", "Please choose reserved number");
                            ViewBag.UserType = GetUserTypeList();
                            ViewBag.Booking = GetBookingListByIconic(cifinfo.uservm.USERTYPECODE);
                            return View(cifinfo);
                        }

                    }
                    CIFInfoVM cifinfovm = cifinfo.uservm;
                    //reget core data by CIFID
                    RetailResponseInfo rri = new RetailResponseInfo();
                    if (cifinfovm.CIFID != "")
                        rri = GetRetailResponse(cifinfovm.CIFID);
                    if (rri.NRC == null) //if wrong CIFID
                    {
                        ModelState.AddModelError("uservm.CIFID", "Invalid CIFID");
                        ViewBag.UserType = GetUserTypeList();
                        ViewBag.Booking = GetBookingList();
                        return View(cifinfo);
                    }
                    //checking Validation

                    #region Validation

                    //CIFID duplicate
                    if (db.CIFInfoModels.Where(u => u.CIFID == cifinfovm.CIFID & u.DELFLAG == false).Count() > 0)
                    {
                        ModelState.AddModelError("uservm.CIFID", "Duplicate CIFID");
                        ViewBag.UserType = GetUserTypeList();
                        ViewBag.Booking = GetBookingList();
                        return View(cifinfo);
                    }

                    #endregion

                    #region Data preparation

                    //create new user
                    CIFInfoModel new_user = new CIFInfoModel();

                    new_user.CIFID = cifinfovm.CIFID;
                    new_user.NAME = cifinfovm.NAME;
                    new_user.NRC = cifinfovm.NRC;
                    new_user.USERTYPE = cifinfo.uservm.USERTYPE;
                    new_user.ADDRESS = cifinfovm.Address;
                    new_user.PHONENO = cifinfovm.PHONENO;
                    if (string.IsNullOrEmpty(cifinfovm.REMARK))
                    {
                        cifinfovm.REMARK = "-";
                    }
                    new_user.REMARK = cifinfovm.REMARK;
                    DateTime expdate = DateTime.Now;
                    DateTime effecitvedate = DateTime.Now;
                    var dd = cifinfovm.strEffectiveDate.Replace("/", "-");
                    var ddexp = cifinfovm.strEXPIREDATE.Replace("/", "-");
                    string addday = "01-" + dd;
                    string adddayexp = "01-" + ddexp;
                    expdate = General.ConvertStrToDateForIconic(adddayexp);
                    effecitvedate = General.ConvertStrToDateForIconic(addday);
                    new_user.EXPIREDATE = expdate;
                    new_user.EFFECTIVEDATE = effecitvedate;
                    new_user.CREATEDDATE = DateTime.Now;
                    new_user.CREATEDUSERID = User.Identity.GetUserId();
                    new_user.BRANCHNAME = cifinfovm.BranchName;
                    new_user.RMID = cifinfovm.RMID;
                    new_user.RMName = cifinfovm.RMName;
                    new_user.Status = 0; //Request
                    if (cifinfo.uservm.IconicBooking == null)
                    {
                        bool IsContinue = true;
                        int increasecount = 1;
                        while (IsContinue)
                        {
                            //prepare for UserTypeCode 
                            var prefix = string.Empty;
                            var Codelength = db.UserTypeModels.Where(a => a.USERTYPE == new_user.USERTYPE).ToList();
                            int length = Codelength[0].GENERATED_LIMIT;
                            var count =
                                db.CIFInfoModels.Where(x => x.USERTYPE == new_user.USERTYPE && new_user.DELFLAG == false)
                                    .OrderByDescending(y => y.ID)
                                    .Select(x => x.USERTYPECODE)
                                    .ToList();
                            int existno = 0;
                            int check = 0;
                            string UserTypecode = Codelength[0].USERTYPE_CODE_LIMIT.ToString();
                            int Usertypecodelength = UserTypecode.Length;
                            if (count.Count > 0)
                            {
                                string takecount = count[0].Substring(count[0].LastIndexOf("-") + 1);
                                char[] ch = { takecount[0], takecount[1] };
                                String str = takecount.TrimStart(ch);
                                existno = Convert.ToInt32(str);
                                check = existno.ToString().Length;
                            }
                            else
                            {
                                check = 1;
                                existno = 0;
                            }


                            var newString = prefix.PadLeft((length - Usertypecodelength) - check, '0');
                            string generatedCode = UserTypecode + newString + (existno + increasecount);
                            if (generatedCode.Length == length)
                            {
                                new_user.USERTYPECODE = generatedCode;
                            }
                            else
                            {
                                cifinfo.uservm = new CIFInfoVM();
                                ViewBag.UserType = GetUserTypeList();
                                ViewBag.RMList = GetRMList();
                                DateTime today = DateTime.Now;
                                DateTime addDate = today.AddDays(365);
                                DateTime addDate1 = today.AddDays(30);
                                cifinfo.uservm.strEXPIREDATE = addDate.ToString("MM/yy");
                                cifinfo.uservm.strEffectiveDate = addDate1.ToString("MM/yy");
                                ViewBag.Booking = GetBookingList();
                                string getuserid = User.Identity.GetUserId();
                                log.Info(getuserid, controllerName, actionName, 1,
                                    "Generated iconic type length is invalid.");
                                ViewBag.CifError = "\"" + cifinfo.uservm.CIFID + "\"";

                                return View(cifinfo);
                            }

                            #region CheckSameBookingNumber

                            var checkbooking =
                                db.IconicBookingModels.Where(x => x.BOOKINGNUMBER == new_user.USERTYPECODE).ToList();
                            var checkblacklist =
                                db.IconicBlacklistModels.Where(x => x.BlackListNumber == new_user.USERTYPECODE).ToList();
                            if (checkbooking.Count > 0 || checkblacklist.Count > 0)
                            {
                                increasecount += 1;
                                continue;
                            }
                            else
                            {
                                IsContinue = false;
                            }

                            #endregion
                        }
                    }
                    else
                    {
                        new_user.USERTYPECODE = cifinfo.uservm.IconicBooking;
                    }
                    cifinfo.uservm.USERTYPECODE = new_user.USERTYPECODE;
                    cifinfo.uservm.RMID = new_user.RMID;
                    cifinfo.uservm.RMName = new_user.RMName;



                    #endregion

                    //db.CIFInfoModels.Add(new_user);
                    //db.SaveChanges();

                    //if (cifinfo.uservm.IconicBooking != null)
                    //{
                    //    #region DataPreparationToupdateBooking

                    //    IconicBookingModel dbModel = new IconicBookingModel();
                    //    var dataFromDB = from s in db.IconicBookingModels
                    //                     where s.DEL_FLAG == false
                    //                     select s;
                    //    dbModel = dataFromDB.SingleOrDefault(m => m.BOOKINGNUMBER == cifinfo.uservm.IconicBooking);

                    //    dbModel.UpdatedDate = DateTime.Now;
                    //    dbModel.UPDATEDUSERID = User.Identity.GetUserId();
                    //    dbModel.InUse = true;

                    //    #endregion
                    //    db.Entry(dbModel).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //}


                    //save log
                    Session["CIFVM"] = string.Empty; //To genereate PDF
                    Session["CIFVM"] = JsonConvert.SerializeObject(cifinfo.uservm);
                    Session["CIFVMCreateReturn"] = JsonConvert.SerializeObject(cifinfo);
                    return RedirectToAction("CIF_ConfirmPage", 1);
                }

                return View();


            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return View("Error");
            }
        }

        public static string GetDateTime(string l_Date, string l_SplitString)
        {
            string[] l_DateArr = l_Date.Split(new string[] { l_SplitString }, StringSplitOptions.None);
            return l_DateArr[2] + "-" + l_DateArr[1] + "-" + l_DateArr[0];

        }

        public ActionResult CIF_ConfirmPage()
        {
            TempData["createReturn"] = "1";
            CIFInfoVM reqmodel = new CIFInfoVM();
            try
            {
                if (TempData["create"] == "1")
                {
                    if (Session["CIFVM"] != null)
                    {
                        if (!string.IsNullOrEmpty(Session["CIFVM"].ToString()))
                        {
                            reqmodel = JsonConvert.DeserializeObject<CIFInfoVM>(Session["CIFVM"].ToString());
                        }
                    }
                }
                else if (TempData["edit"] == "2")
                {
                    if (Session["CIFEditVM"] != null)
                    {
                        if (!string.IsNullOrEmpty(Session["CIFEditVM"].ToString()))
                        {
                            reqmodel = JsonConvert.DeserializeObject<CIFInfoVM>(Session["CIFEditVM"].ToString());
                        }
                    }
                }
                string userID = User.Identity.GetUserId();
                ViewBag.Emaillist = GetApproverEmailList(userID);
                reqmodel.UserEmail =
                    (from s in db.Users where s.Id == userID && s.DEL_FLAG == false select s.Email).SingleOrDefault();


            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View(reqmodel);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CIF_ConfirmPage(CIFInfoVM reqVM)
        {
            try
            {
                Session["CIFVM"] = string.Empty;
                if (ModelState.IsValid)
                {
                    #region Data preparation

                    //create new user
                    CIFInfoModel new_user = new CIFInfoModel();

                    new_user.CIFID = reqVM.CIFID;
                    new_user.NAME = reqVM.NAME;
                    new_user.NRC = reqVM.NRC;
                    new_user.USERTYPE = reqVM.USERTYPE;
                    new_user.USERTYPECODE = reqVM.USERTYPECODE;
                    new_user.ADDRESS = reqVM.Address;
                    new_user.PHONENO = reqVM.PHONENO;
                    new_user.REMARK = reqVM.REMARK;
                    DateTime expdate = DateTime.Now;
                    DateTime effecitvedate = DateTime.Now;
                    var dd = reqVM.strEffectiveDate.Replace("/", "-");
                    var ddexp = reqVM.strEXPIREDATE.Replace("/", "-");
                    string addday = "01-" + dd;
                    string adddayexp = "01-" + ddexp;
                    expdate = General.ConvertStrToDateForIconic(adddayexp);
                    effecitvedate = General.ConvertStrToDateForIconic(addday);
                    new_user.EXPIREDATE = expdate;
                    new_user.EFFECTIVEDATE = effecitvedate;
                    new_user.CREATEDDATE = DateTime.Now;
                    new_user.CREATEDUSERID = User.Identity.GetUserId();
                    new_user.BRANCHNAME = reqVM.BranchName;
                    new_user.RMID = reqVM.RMID;
                    new_user.RMName = reqVM.RMName;
                    new_user.Status = 0; //Request
                    new_user.ApproverEmail = reqVM.ApproverEmail;
                    new_user.UserEmail = reqVM.UserEmail;

                    #endregion

                    db.CIFInfoModels.Add(new_user);
                    db.SaveChanges();

                    if (reqVM.IconicBooking != null)
                    {
                        #region DataPreparationToupdateBooking

                        IconicBookingModel dbModel = new IconicBookingModel();
                        var dataFromDB = from s in db.IconicBookingModels
                                         where s.DEL_FLAG == false
                                         select s;
                        dbModel = dataFromDB.SingleOrDefault(m => m.BOOKINGNUMBER == reqVM.IconicBooking);
                        dbModel.UpdatedDate = DateTime.Now;
                        dbModel.UPDATEDUSERID = User.Identity.GetUserId();
                        dbModel.InUse = true;

                        #endregion

                        db.Entry(dbModel).State = EntityState.Modified;
                        db.SaveChanges();
                    }


                    //save log
                    string getuserid = User.Identity.GetUserId();
                    log.Info(getuserid, controllerName, "CIF_ConfirmPage", 2, $"{reqVM.CIFID} Creation is pending.");
                    ViewBag.CifCreateInfo = "\"" + reqVM.CIFID + "\"";
                    var getBranch =
                        (from s in db.Users where s.Id == getuserid && s.DEL_FLAG == false select s).SingleOrDefault();
                    int branchid = getBranch.BranchID;
                    IEnumerable<SelectListItem> items2 =
                        db.Users.Where(
                            b => b.DEL_FLAG == false && b.BranchID == branchid && b.Email != null && b.Role == 3)
                            .Select(c => new SelectListItem
                            {
                                Selected = (c.Email == reqVM.ApproverEmail),
                                Value = c.Email.ToString(),
                                Text = c.Email
                            }).ToList();

                    ViewBag.Emaillist = items2;
                    List<string> mailList = new List<string>();
                    mailList.Add(reqVM.UserEmail);
                    mailList.Add(reqVM.ApproverEmail);

                    #region sendEmail

                    bool sendEmail = SendEmailForIconic(mailList, reqVM.CIFID, getuserid, controllerName,
                        "CIF_ConfirmPage");

                    #endregion

                    return View(reqVM);
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View();
        }

        private void SaveAccounts(List<AccountVM> accvms, string CIFID, List<Models.Account_Info> core_accs)
        {
            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            try
            {
                int saveCount = 0;
                foreach (AccountVM accvm in accvms)
                {
                    if (accvm.Active)
                        continue;
                    var core_acc = core_accs.Where(c => c.ACCOUNTNO == accvm.ACCOUNTNO).FirstOrDefault();
                    if (core_acc == null) //invalid acc no
                        continue;
                    saveCount++;
                    Models.Account_Info acc = new Models.Account_Info();
                    //core data
                    acc.ACCOUNTNO = core_acc.ACCOUNTNO;
                    acc.SCHM_TYPE = core_acc.SCHM_TYPE;
                    acc.SCHM_CODE = core_acc.SCHM_CODE;
                    acc.ACC_DESC = core_acc.ACC_DESC;
                    acc.BRANCHCODE = core_acc.BRANCHCODE;
                    acc.CURRENCY = core_acc.CURRENCY;
                    acc.AVAI_BALANCE = core_acc.AVAI_BALANCE;

                    //default values
                    acc.CIFID = CIFID;
                    acc.CreatedDateTime = DateTime.Now;
                    acc.CreatedUserID = User.Identity.GetUserId();
                    acc.ACCT_CLOSE_FLAG = false;

                    db.Acct_InfoModels.Add(acc);
                    db.SaveChanges();
                }

                //save log
                string getuserid = User.Identity.GetUserId();
                log.Info(getuserid, controllerName, actionName, 1, $"{saveCount} acounts saved.");
            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
            }
        }

        // GET: CIFInfoModels/Edit/5
        public ActionResult Edit(int? id)
        {
            CIFInfoEdit CifInfoVM = new CIFInfoEdit();
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var info = db.CIFInfoModels.Find(id);
            if (info == null)
            {
                return HttpNotFound();
            }
            var CIFID = info.CIFID;
            var user = db.Acct_InfoModels.Where(a => a.CIFID == CIFID).ToList().ConvertAll(u => new AccountInfo()
            {
                AccountNumber = u.ACCOUNTNO,
                AccountType = u.SCHM_TYPE,
                BranchID = u.BRANCHCODE,
                Currency = u.CURRENCY,
                Schm_Code = u.SCHM_CODE,
                AvailableAmt = u.AVAI_BALANCE.ToString(),
            });
            double totalamt = 0;
            if (user.Count > 0)
            {
                foreach (var getTotalamt in user)
                {
                    totalamt += Convert.ToDouble(getTotalamt.AvailableAmt);
                }
            }

            CifInfoVM.uservm = JsonConvert.DeserializeObject<CIFInfoVM>(JsonConvert.SerializeObject(info));
            CifInfoVM.accountvms = user.ToList();
            string dateString = String.Format("{0:dd-MM-yyyy}", CifInfoVM.uservm.EXPIREDATE);
            DateTime effectivedateString = DateTime.Now;
            effectivedateString = CifInfoVM.uservm.EffectiveDate;
            DateTime expiredateString = DateTime.Now;
            expiredateString = CifInfoVM.uservm.EXPIREDATE;
            CifInfoVM.uservm.strEXPIREDATE = expiredateString.ToString("MM/yy");
            CifInfoVM.uservm.strEffectiveDate = effectivedateString.ToString("MM/yy");
            return View(CifInfoVM);
        }

        // POST: CIFInfoModels/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(CIFInfoEdit cIFInfoModel)
        {
            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            TempData["edit"] = "2";
            try
            {
                if (ModelState.IsValid)
                {
                    CIFInfoVM cifinfovm =
                        JsonConvert.DeserializeObject<CIFInfoVM>(JsonConvert.SerializeObject(cIFInfoModel.uservm));

                    #region Data preparation

                    //create new user
                    CIFInfoModel new_user = new CIFInfoModel();
                    new_user.CIFID = cifinfovm.CIFID;
                    new_user.NAME = cifinfovm.NAME;
                    new_user.NRC = cifinfovm.NRC;
                    new_user.USERTYPE = cifinfovm.USERTYPE;
                    new_user.ADDRESS = cifinfovm.Address;
                    new_user.PHONENO = cifinfovm.PHONENO;
                    new_user.REMARK = cifinfovm.REMARK;
                    new_user.USERTYPECODE = cifinfovm.USERTYPECODE;

                    new_user.DELFLAG = false;
                    DateTime expdate = DateTime.Now;
                    DateTime effecitvedate = DateTime.Now;
                    var dd = cifinfovm.strEffectiveDate.Replace("/", "-");
                    var ddexp = cifinfovm.strEXPIREDATE.Replace("/", "-");
                    string addday = "01-" + dd;
                    string adddayexp = "01-" + ddexp;
                    expdate = General.ConvertStrToDateForIconic(adddayexp);
                    effecitvedate = General.ConvertStrToDateForIconic(addday);
                    new_user.EXPIREDATE = expdate;
                    new_user.CREATEDUSERID = User.Identity.GetUserId();
                    new_user.ID = cIFInfoModel.uservm.ID;
                    new_user.EFFECTIVEDATE = effecitvedate;
                    new_user.BRANCHNAME = cifinfovm.BranchName;
                    cIFInfoModel.uservm.USERTYPECODE = new_user.USERTYPECODE;
                    cIFInfoModel.uservm.EXPIREDATE = new_user.EXPIREDATE;

                    #endregion

                    new_user.UpdatedDate = DateTime.Now;
                    new_user.UPDATEDUSERID = User.Identity.GetUserId();
                    var localEntity = db.Set<CIFInfoModel>().Local.FirstOrDefault(f => f.ID == new_user.ID);
                    if (localEntity != null)
                    {
                        db.Entry(localEntity).State = EntityState.Detached;
                    }
                    db.Entry(new_user).State = EntityState.Modified;
                    db.SaveChanges();

                    //save log
                    string getuserid = User.Identity.GetUserId();
                    log.Info(getuserid, controllerName, actionName, 2, $"{cIFInfoModel.uservm.NAME} is updated.");
                    Session["CIFVM"] = string.Empty; //To genereate PDF
                    Session["CIFVM"] = JsonConvert.SerializeObject(cIFInfoModel.uservm);

                    Session["CIFEditVM"] = JsonConvert.SerializeObject(cIFInfoModel.uservm);
                    return RedirectToAction("CIF_ConfirmPage");
                }

                return RedirectToAction("CIF_ConfirmPage");
            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return View("Error");
            }
        }

        // GET: CIFInfoModels/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
            if (cIFInfoModel == null)
            {
                return HttpNotFound();
            }

            return View(cIFInfoModel);
        }

        // POST: CIFInfoModels/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            try
            {
                CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
                string CIFID = cIFInfoModel.CIFID.ToLower();
                cIFInfoModel.DELFLAG = true;
                //db.CIFInfoModels.Remove(cIFInfoModel);

                db.Acct_InfoModels
                    .Where(a => a.CIFID.Contains(CIFID))
                    .ToList()
                    .ForEach(a => a.ACCT_CLOSE_FLAG = true);

                db.SaveChanges();
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                return View(ex);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        public ActionResult PDF(bool flag)
        {
            List<string> fileList = new List<string>();
            var cifInfo = JsonConvert.DeserializeObject<CIFInfoVMForReport>(Session["InfoForReport"].ToString());
            var callcenter = (from a in db.Credentials
                              where a.Status == "1" & a.Name == "Iconic Call Center" & a.Key == "Iconic"
                              select a).ToList();
            string iconicCallCenter = callcenter[0].Value;
            string filename = GeneratePdf(cifInfo.CIFID, cifInfo.NAME, cifInfo.USERTYPECODE, cifInfo.strEXPIREDATE.ToString(), cifInfo.RMName, iconicCallCenter);
            string filename1 = GeneratePdfForNewCardNReceiving(iconicCallCenter);
            if (flag)
            {
                string filename2 = GeneratePdfForTermAndConditon(iconicCallCenter);
                fileList.Add(filename2);

            }

            fileList.Add(filename);
            fileList.Add(filename1);

            if (fileList.Count > 0)
            {
                return Download(fileList);
            }

            return null;
        }

        public ActionResult Download(List<string> filename)
        {
            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            try
            {
                string CifPdf_Path = ConstantValues.CifPdf_Path;
                string fullpath = "";
                using (var memoryStream = new MemoryStream())
                {
                    if (filename.Count > 0)
                    {
                        using (var ziparchive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
                        {
                            foreach (var item in filename)
                            {
                                if (item.Contains("cifinfo.pdf") || item.Contains("cifinfoNewCardAndReceiving.pdf") || item.Contains("cifinfoTermsAndConditions.pdf"))
                                {
                                    fullpath = $"{CifPdf_Path}\\Cif Information\\{item}";
                                }
                                ziparchive.CreateEntryFromFile(fullpath, item);
                                string getuserid = User.Identity.GetUserId();
                                log.Log(getuserid, controllerName, actionName, $"Downlod successfully.",
                                    $"File name is {item}.");
                            }
                        }
                    }
                    return File(memoryStream.ToArray(), "application/zip", "Attachments.zip");

                }

            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return View("Error");
            }
        }

        [Obsolete]
        private string GeneratePdf(string cifid, string Fullname, string iconicno, string expdate, string RmName,
            string iconicCallCenter)
        {
            try
            {
                //string AdminPdf_Path = System.Configuration.ConfigurationManager.AppSettings["AdminPdfSavePath"];
                string CifPdf_Path = ConstantValues.CifPdf_Path;
                string filename = "";
                CifPdf_Path = $"{CifPdf_Path}\\Cif Information";
                //create if folder doesn't exist
                if (!Directory.Exists(CifPdf_Path))
                {
                    Directory.CreateDirectory(CifPdf_Path);
                }
                //create a new pdf document
                PdfSharp.Pdf.PdfDocument document = new PdfSharp.Pdf.PdfDocument();

                // Create an empty page
                PdfSharp.Pdf.PdfPage page = document.AddPage();
                //page.Contents.CreateSingleContent().Stream.UnfilteredValue;

                // Get an XGraphics object for drawing
                XGraphics gfx = XGraphics.FromPdfPage(page);
                XPdfFontOptions options = new XPdfFontOptions(PdfFontEncoding.Unicode, PdfFontEmbedding.Always);
                //draw background image
                //DrawImage(gfx);
                //gfx.DrawRectangle(XBrushes.LightGray, new XRect(0, 0, page.Width.Point, page.Height.Point));
                //PDF Size
                page.Size = PdfSharp.PageSize.A4;
                // Put a logo in the header
                DrawTitleImage(gfx);
                // Create a font
                XFont font = new XFont("Times New Roman", 20, XFontStyle.Bold, options);
                XFont font1 = new XFont("Times New Roman", 8, XFontStyle.Bold, options);

                //Draw page border
                //XRect A4Rect = new XRect(50, 0, 500, 750);
                //gfx.DrawRectangle(XPens.Black,A4Rect);

                font = new XFont("Times New Roman", 14, XFontStyle.Bold | XFontStyle.Underline, options);

                // Draw the text
                //gfx.DrawString("eBanking Customer Information", font, XBrushes.Black,
                //  new XRect(0, 0, page.Width, 190),
                //  XStringFormats.Center);

                //Draw Dotted Line
                XPen pen = new XPen(XColors.Indigo, 1.5);
                XPen pens = new XPen(XColors.Black, 0.5);
                //pen.DashStyle = XDashStyle.Dot;
                //gfx.DrawRectangle(pens, 330, 0, 219, 70);

                //gfx.DrawLine();
                // Create a font
                font = new XFont("Times New Roman", 12, XFontStyle.Regular, options);


                ////for Datetime name
                //gfx.DrawString($"  Created Date", font, XBrushes.Black, new XRect(335, 15, page.Width, 10),
                //  XStringFormats.CenterLeft);
                //for Datetime value
                gfx.DrawString($"{DateTime.Now.ToString("dd/MM/yyyy")}", font, XBrushes.Gray,
                    new XRect(482, 50, page.Width, 10),
                    XStringFormats.CenterLeft);

                // For Staff ID name
                //gfx.DrawString($"  Staff_ID", font, XBrushes.Black, new XRect(335, 45, page.Width, 10),
                //  XStringFormats.CenterLeft);
                //// For Staff ID value
                //gfx.DrawString($": {StaffID}", font, XBrushes.Black, new XRect(420, 45, page.Width, 10),
                //  XStringFormats.CenterLeft);

                // Create a font
                font = new XFont("Times New Roman", 12, XFontStyle.Regular, options);

                // For Customer name
                gfx.DrawString($"FULL NAME", font, XBrushes.Black, new XRect(60, 183, page.Width, 10),
                    XStringFormats.CenterLeft);
                // For Customer name value
                gfx.DrawString($"{Fullname}", font, XBrushes.Black, new XRect(210, 183, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawLine(pens, 210, 193, 440, 193);
                // For Customer Id
                gfx.DrawString($"CUSTOMER ID", font, XBrushes.Black, new XRect(60, 203, page.Width, 10),
                    XStringFormats.CenterLeft);
                // For Customer Id value
                gfx.DrawString($"{cifid}", font, XBrushes.Black, new XRect(210, 203, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawLine(pens, 210, 213, 440, 213);
                // For iconno name
                gfx.DrawString($"THE ICONIC NUMBER ", font, XBrushes.Black, new XRect(60, 223, page.Width, 10),
                    XStringFormats.CenterLeft);
                // For iconno value
                gfx.DrawString($"{iconicno}", font, XBrushes.Black, new XRect(210, 223, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawLine(pens, 210, 233, 440, 233);
                // For Expire Date  name
                gfx.DrawString($"EXPIRED DATE", font, XBrushes.Black, new XRect(60, 243, page.Width, 10),
                    XStringFormats.CenterLeft);
                // For Expire Date  value
                gfx.DrawString($"{expdate}", font, XBrushes.Black, new XRect(210, 243, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawLine(pens, 210, 253, 440, 253);
                // For RM name
                gfx.DrawString($"ASSIGNED RM", font, XBrushes.Black, new XRect(60, 263, page.Width, 10),
                    XStringFormats.CenterLeft);
                // For RM value
                gfx.DrawString($"{RmName}", font, XBrushes.Black, new XRect(210, 263, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawLine(pens, 210, 273, 440, 273);
                string timestamp = General.GetTimestamp(DateTime.Now);
                //footer
                gfx.DrawString($"THE ICONIC Call Center (+95) {iconicCallCenter}", font1, XBrushes.Gray,
                    new XRect(20, 750, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawString($"Standing with you", font, XBrushes.Black, new XRect(450, 750, 100, 0),
                    XStringFormats.CenterLeft);
                gfx.DrawString($"www.abank.com.mm", font1, XBrushes.Gray, new XRect(20, 760, page.Width, 10),
                    XStringFormats.CenterLeft);
                // Save the document...
                filename = $"{timestamp}_{cifid}_cifinfo.pdf";
                document.Save($"{CifPdf_Path}\\{filename}");


                return filename;
            }
            catch (Exception ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return null;
            }
        }

        [Obsolete]
        private string GeneratePdfForNewCardNReceiving(string iconicCallCenter)
        {
            try
            {
                //string AdminPdf_Path = System.Configuration.ConfigurationManager.AppSettings["AdminPdfSavePath"];
                string CifPdf_Path = ConstantValues.CifPdf_Path;
                string filename = "";
                CifPdf_Path = $"{CifPdf_Path}\\Cif Information";
                //create if folder doesn't exist
                if (!Directory.Exists(CifPdf_Path))
                {
                    Directory.CreateDirectory(CifPdf_Path);
                }
                //create a new pdf document
                PdfSharp.Pdf.PdfDocument document = new PdfSharp.Pdf.PdfDocument();

                // Create an empty page
                PdfSharp.Pdf.PdfPage page = document.AddPage();
                //page.Contents.CreateSingleContent().Stream.UnfilteredValue;

                // Get an XGraphics object for drawing
                XGraphics gfx = XGraphics.FromPdfPage(page);
                XPdfFontOptions options = new XPdfFontOptions(PdfFontEncoding.Unicode, PdfFontEmbedding.Always);
                //PDF Size
                page.Size = PdfSharp.PageSize.A4;
                // Put a logo in the header
                DrawTitleImage(gfx);
                // Create a font
                XFont font = new XFont("Times New Roman", 20, XFontStyle.Bold, options);
                XFont font1 = new XFont("Times New Roman", 8, XFontStyle.Bold, options);
                XFont font3 = new XFont("Times New Roman", 20, XFontStyle.Bold, options);
                XFont font4 = new XFont("Times New Roman", 14, XFontStyle.Regular, options);

                font = new XFont("Times New Roman", 14, XFontStyle.Bold | XFontStyle.Underline, options);
                //Draw Dotted Line
                XPen pen = new XPen(XColors.Indigo, 1.5);
                XPen pens = new XPen(XColors.Black, 0.5);
                // Create a font
                font = new XFont("Times New Roman", 12, XFontStyle.Regular, options);

                //for Datetime value
                gfx.DrawString($"{DateTime.Now.ToString("dd/MM/yyyy")}", font, XBrushes.Gray,
                    new XRect(482, 50, page.Width, 10),
                    XStringFormats.CenterLeft);

                //for textarea of letter
                //Rectangle r = new Rectangle(20, 133, 550, 200);
                //gfx.DrawRectangle(pen, XBrushes.LightBlue, r);
                gfx.DrawString("Dear \"THE ICONIC\" Member,", font4, XBrushes.Black,
                    new XRect(30, 150, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawString("A bank is pleased and honored to congratulate you on becoming THE ICONIC privilege banking", font4, XBrushes.Black,
                    new XRect(30, 190, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawString("customer.THE ICONIC privilege banking is here to amplify your wealth and accelerate your goals.", font4, XBrushes.Black,
                    new XRect(30, 210, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawString("All-inclusive services are well-designed with our tailored privileges offering to suit your needs and", font4, XBrushes.Black,
                   new XRect(30, 230, page.Width, 10),
                   XStringFormats.CenterLeft);
                gfx.DrawString("enjoy a world of curated indulgences. We are here to craft your journey as your wealth growing.", font4, XBrushes.Black,
                   new XRect(30, 250, page.Width, 10),
                   XStringFormats.CenterLeft);
                gfx.DrawString("We are delighted to introduce a privilege banking service by A bank named \"THE ICONIC\", which", font4, XBrushes.Black,
                    new XRect(30, 280, page.Width, 10),
                  XStringFormats.CenterLeft);
                gfx.DrawString("provides successful individuals access to exclusive privileges beyond possibilities.Therefore,it is our", font4, XBrushes.Black,
                    new XRect(30, 300, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("honor to welcome you, THE ICONIC member, into our exclusive membership program and our", font4, XBrushes.Black,
                    new XRect(30, 320, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("exclusive campaign which includes special offers including a customized gold plate to magnify your", font4, XBrushes.Black,
                    new XRect(30, 340, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("wealth.", font4, XBrushes.Black, new XRect(30, 360, page.Width, 10),
                XStringFormats.CenterLeft);
                //for iconic card checkbox
                //Rectangle r1 = new Rectangle(20, 350, 550, 60);
                //gfx.DrawRectangle(pen, XBrushes.LightBlue, r1);
                gfx.DrawRectangle(pens, XBrushes.White, 50, 400, 15, 10);
                gfx.DrawString("THE ICONIC Card", font4, XBrushes.Black, new XRect(100, 400, 18, 10),
                    XStringFormats.CenterLeft);


                //for welcome pack
                //Rectangle r2 = new Rectangle(20, 430, 550, 60);
                //gfx.DrawRectangle(pen, XBrushes.LightBlue, r2);
                gfx.DrawRectangle(pens, XBrushes.White, 50, 450, 15, 10);
                gfx.DrawString("Welcome Pack and Privilege Book", font4, XBrushes.Black, new XRect(100, 450, 18, 10),
                    XStringFormats.CenterLeft);
                //for customer signature
                //Rectangle r3 = new Rectangle(20, 510, 550, 60);
                //gfx.DrawRectangle(pen, XBrushes.LightBlue, r3);
                gfx.DrawString("Customer Signature", font4, XBrushes.Black, new XRect(100, 500, page.Width, 50),
                    XStringFormats.CenterLeft);
                string timestamp = General.GetTimestamp(DateTime.Now);
                //footer
                gfx.DrawString($"THE ICONIC Call Center (+95) {iconicCallCenter}", font1, XBrushes.Gray,
                    new XRect(20, 750, page.Width, 50),
                    XStringFormats.CenterLeft);
                gfx.DrawString($"Standing with you", font, XBrushes.Black, new XRect(450, 750, 100, 0),
                    XStringFormats.CenterLeft);
                gfx.DrawString($"www.abank.com.mm", font1, XBrushes.Gray, new XRect(20, 760, page.Width, 10),
                    XStringFormats.CenterLeft);
                // Save the document...
                filename = $"{timestamp}_cifinfoNewCardAndReceiving.pdf";
                document.Save($"{CifPdf_Path}\\{filename}");


                return filename;
            }
            catch (Exception ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return null;
            }
        }

        [Obsolete]
        private string GeneratePdfForTermAndConditon(string iconicCallCenter)
        {
            try
            {
                //string AdminPdf_Path = System.Configuration.ConfigurationManager.AppSettings["AdminPdfSavePath"];
                string CifPdf_Path = ConstantValues.CifPdf_Path;
                string filename = "";
                CifPdf_Path = $"{CifPdf_Path}\\Cif Information";
                //create if folder doesn't exist
                if (!Directory.Exists(CifPdf_Path))
                {
                    Directory.CreateDirectory(CifPdf_Path);
                }
                //create a new pdf document
                PdfSharp.Pdf.PdfDocument document = new PdfSharp.Pdf.PdfDocument();

                // Create an empty page
                PdfSharp.Pdf.PdfPage page = document.AddPage();
                //page.Contents.CreateSingleContent().Stream.UnfilteredValue;

                // Get an XGraphics object for drawing
                XGraphics gfx = XGraphics.FromPdfPage(page);
                XPdfFontOptions options = new XPdfFontOptions(PdfFontEncoding.Unicode, PdfFontEmbedding.Always);
                //PDF Size
                page.Size = PdfSharp.PageSize.A4;
                // Put a logo in the header
                DrawTitleImage(gfx);
                // Create a font
                XFont font = new XFont("Times New Roman", 20, XFontStyle.Bold, options);
                XFont font1 = new XFont("Times New Roman", 8, XFontStyle.Bold, options);
                XFont font3 = new XFont("Times New Roman", 20, XFontStyle.Bold, options);
                XFont font4 = new XFont("Times New Roman", 14, XFontStyle.Regular, options);
                XFont fontforMM = new XFont("Zawgyi-One", 10, XFontStyle.Regular, options);

                font = new XFont("Times New Roman", 14, XFontStyle.Bold | XFontStyle.Underline, options);
                //Draw Dotted Line
                XPen pen = new XPen(XColors.Indigo, 1.5);
                XPen pens = new XPen(XColors.Black, 0.5);
                // Create a font
                font = new XFont("Times New Roman", 12, XFontStyle.Regular, options);


                //for Datetime value
                gfx.DrawString($"{DateTime.Now.ToString("dd/MM/yyyy")}", font, XBrushes.Gray,
                    new XRect(482, 50, page.Width, 10),
                    XStringFormats.CenterLeft);
                //for textarea of letter
                //Rectangle r = new Rectangle(20, 133, 550, 200);
                //gfx.DrawRectangle(pen, XBrushes.LightBlue, r);
                gfx.DrawString("Terms and Conditions of THE ICONIC", font4, XBrushes.Black,
                    new XRect(20, 150, page.Width, 10),
                    XStringFormats.Center);
                gfx.DrawString("1. သက်ဆိုင်ရာဥပဒေများ၊ ညွှန်ကြားချက်များ၊ အသစ် (သို့) ပြောင်းလဲမှုကြောင့် ထုတ်ပြန်သည့် ဘဏ်ဧ။် လုပ်ထုံးလုပ်နည်းများကို", fontforMM, XBrushes.Black,
                    new XRect(30, 190, 100, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawString("လိုက်နာဆောင်ရွက်သွားပါမည်။", fontforMM, XBrushes.Black,
                    new XRect(40, 210, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawString("I comply with updated bank’s procedures according to existing/ amended/ updated Laws and Directives.", fontforMM, XBrushes.Black,
                    new XRect(30, 230, page.Width, 10),
                    XStringFormats.CenterLeft);
                gfx.DrawString("2. A bankဧ။် ဝန်ဆောင်မှုများကို မည်သည့် ဥပဒေပြစ်မှုကျုးလွန်ရန် အလို့ငှာ သုံးစွဲသွားမည် မဟုတ်ပါကြောင်းကတိပြုပါသည်။", fontforMM, XBrushes.Black,
                   new XRect(30, 250, page.Width, 10),
                   XStringFormats.CenterLeft);
                gfx.DrawString("I declare that A bank’s services shall not be used for any clause of any criminal cases.", fontforMM, XBrushes.Black,
                   new XRect(30, 270, page.Width, 10),
                   XStringFormats.CenterLeft);
                gfx.DrawString("3. THE ICONIC အသင်းဝင်လျှောက်ထားခြင်းဆိုင်ရာ အောက်ပါစည်းမျဉ်းစည်းကမ်းများကို သိရှိပြီးဖြစ်ပါသည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 290, page.Width, 10),
                  XStringFormats.CenterLeft);
                gfx.DrawString("3.1 THE ICONIC စာရင်းသေအပ်ငွေစာရင်းသည် တစ်ဦးချင်းစာရင်းပုံစံဖြင့်သာ ဖွင့်ရမည်ဖြစ်သည်။ အခြားတစ်ဦးတစ်ယောက်နှင့်", fontforMM, XBrushes.Black,
                    new XRect(30, 310, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("တွဲဖက်စာရင်းဖွင့်လှစ်၍မရပါ။", fontforMM, XBrushes.Black,
                    new XRect(40, 330, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("Only an individual account type can open THE ICONIC Fixed Deposit account.", fontforMM, XBrushes.Black,
                    new XRect(30, 350, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("3.2 စာရင်းပိုင်ရှင်တစ်ဦးတည်းမှ ဖွင့်လှစ်ထားသော စာရင်းသေအပ်ငွေအကောင့်များ၏ အပ်ငွေပမာဏသည် အနည်းဆုံးအပ်ငွေ", fontforMM, XBrushes.Black,
                    new XRect(30, 370, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("လိုအပ်ချက် (သိန်း ၁၄,၀၀၀ ကျပ်) နှင့် ညီမျှပါက အသင်းဝင်အဖြစ်သတ်မှတ်ပါမည်။", fontforMM, XBrushes.Black,
                    new XRect(40, 390, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("If the customer has several fixed deposit accounts and total amount is equivalent to minimum required amount of 1,400 ", fontforMM, XBrushes.Black,
                    new XRect(30, 410, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("Million MMK, the customer is considered as THE ICONIC member of A bank. ", fontforMM, XBrushes.Black,
                    new XRect(40, 430, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("3.3 အသင်းဝင်ဖြစ်ရန် စာရင်းသေအပ်ငွေပမာဏ သိန်း ၁၄,၀၀၀ ကျပ်နှင့် အထက်ကို အနည်းဆုံး ၆လကြာ ၌အပ်နှံထားရှိရမည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 450, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("In order to maintain membership status, the customer has to deposit minimum required amount of 1,400 Million MMK", fontforMM, XBrushes.Black,
                    new XRect(30, 470, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("(or its equivalent) for duration of 6 months period.", fontforMM, XBrushes.Black,
                    new XRect(40, 490, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("4. Priority Pass membership card အား memberသည်သာလျှင်အသုံးပြုခွင့်ရှိကြောင်းနှင့် အသုံးပြုရာတွင် လိုက်နာရမည့် အောက်ပါ အချက်များကို သိရှိပြီးဖြစ်ပါသည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 510, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("4.2 ထပ်မံ၍အပိုခေါ်ဆောင်သော ဧည့်သည်များအတွက် တစ်ယောက်လျှင် ဝန်ဆောင်ခကျသင့်ငွေ ၃၂ဒေါ်လာကို စာရင်းသေအပ်ငွေကာလပြီးဆုံးချိန်တွင် ယခုဖွင့်လှစ်ထားသောအပ်ငွေအကောင့်မှ နှုတ်ယူသွားမည်ကို သိရှိပြီး ထိုသို့ပြုလုပ်မည်ကို ခွင့်ပြုပါသည်။", font4, XBrushes.Black,
                    new XRect(30, 530, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("Additional accompanying guests are subject to lounge service fees which will be charged USD 32 at the end of the Fixed Deposit term. I consent that A bank can deduct additional lounge service charge from my deposit account. ", font4,
                    XBrushes.Black, new XRect(30, 550, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("5.Fast Track Immigration at Suvarnabhumi Airport ဝန်ဆောင်မှုအား memberသည်သာလျှင်အသုံးပြုခွင့်ရှိကြောင်းနှင့် အသုံးပြုရာတွင် လိုက်နာရမည့် အောက်ပါ အချက်များကို သိရှိပြီးဖြစ်ပါသည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 570, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("I acknowledge that Fast Track Immigration at Suvarnabhumi Airport service can be used by THE ICONIC member only.", fontforMM, XBrushes.Black,
                    new XRect(30, 590, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("5.1 လူဝင်မှုကြီးကြပ်ရေးဌာန၏ ပြည်ဝင်ခွင့်စစ်ဆေးချက်များအား ရှောင်ရန် ဤဝန်ဆောင်မှုကို ပေးခြင်းမဟုတ်ပါ။", fontforMM, XBrushes.Black,
                    new XRect(30, 610, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("This service cannot use to avoid the immigration.", font4, XBrushes.Black,
                    new XRect(30, 630, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("5.2 လူဝင်မှုကြီးကြပ်ရေးဌာနမှ ပြည်ဝင်ခွင့်စစ်ဆေးရာတွင် ဖြစ်ပေါ်လာသော အခက်အခဲများ ပြဿနာတစ်စုံတစ်ရာအတွက် ဘဏ်၌တာဝန်မရှိပါ။", fontforMM, XBrushes.Black,
                    new XRect(30, 650, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("A bank will not responsible for any incident occurs during the immigration checking.", fontforMM, XBrushes.Black,
                    new XRect(30, 670, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("5.3 ယခုဝန်ဆောင်မှုသည် Bangladesh (BD), Cameroon (CM), Guinea (GN), India (IN), Iran (Islamic Republic Of) (IR), Kenya (KE), Nigeria (NG), Pakistan (PK), Sri Lanka (LK), Syrian Arab Republic (SY) နိုင်ငံကူးလက်မှတ်ကိုင်ဆောင်ထားသူများ အသုံးပြူ၍မရပါ။", fontforMM, XBrushes.Black,
                    new XRect(30, 690, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("This service is not available to passport holders of the following countries: Bangladesh (BD), Cameroon (CM), Guinea (GN), India (IN), Iran (Islamic Republic Of) (IR), Kenya (KE), Nigeria (NG), Pakistan (PK), Sri Lanka (LK), Syrian Arab Republic (SY) ", fontforMM, XBrushes.Black,
                    new XRect(30, 710, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("5.4 ယခုဝန်ဆောင်မှုအား လိုအပ်ပါက ဝန်ဆောင်မှုပေးခြင်းကို ဘဏ်မှရပ်ဆိုင်းနိုင်သည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 730, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("A bank reserves the right to cancel the booking if necessary.", fontforMM, XBrushes.Black,
                    new XRect(30, 750, page.Width, 10),
                 XStringFormats.CenterLeft);
                gfx.DrawString("6. Cheque-no-bounce အား အသုံးပြုမည်ဆိုပါက အခြားလိုအပ်သည့် အချက်အလက်များ လျှောက်လွှာများအား ဖြည့်ရမည်ကို သိရှိပြီးဖြစ်ပါသည်။ ", fontforMM, XBrushes.Black,
                    new XRect(30, 770, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("I acknowledge proceeding with additional application forms and providing more information to use Cheque-No Bounce service.", fontforMM, XBrushes.Black,
                    new XRect(30, 790, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("6.1 Cheque-no-bounce အား အသုံးပြုရာတွင် ပေးဆောင်ရမည့် အတိုးနှန်း နှင့် အသုံးပြုလိုက်သော ပမာဏကို စာရင်းသေအပ်ငွေကာလပြီးဆုံးချိန်တွင် ယခုဖွင့်လှစ်ထားသောအပ်ငွေအကောင့်မှ နှုတ်ယူသွားမည်ကို သိရှိပြီး ထိုသို့ပြုလုပ်မည်ကို ခွင့်ပြုပါသည်။  ", fontforMM, XBrushes.Black,
                    new XRect(30, 810, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("In case applying for cheque-no-bounce service, I consent to A bank to deduct the principle and interest rate according to the agreed rate at the matured date of the fixed deposit term. ", fontforMM,
                    XBrushes.Black, new XRect(30, 830, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("7. ဘဏ်မှ သတ်မှတ်ထားသော အနည်းဆုံးအပ်ငွေပမာဏလိုအပ်ချက်အား မထားရှိပါက ဘဏ်မှ အသင်းဝင်အဖြစ်မှ ချက်ချင်းရပ်ဆိုင်းနိုင်သည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 850, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("In the case where the customer fails to maintain the deposit to the conditions stipulated by the Bank, the Bank reserves the right to cancel THE ICONIC status of such customer and any privileges thereof, with effective immediately without any prior notice.", fontforMM, XBrushes.Black,
                    new XRect(30, 870, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("8. ဘဏ်မှ သတ်မှတ်ထားသော စည်းကမ်းချက်များနှင့် ပေးအပ်သော ဝန်ဆောင်မှုများအား ကြိုတင်အကြာင်းကြားခြင်းမရှိပဲ ပယ်ဖျက်ခြင်း (သို့) ရပ်ဆိုင်းခြင်းများ ပြုလုပ်နိုင်သည်။ ", fontforMM, XBrushes.Black,
                    new XRect(30, 890, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("The Bank reserves the right to modify terms and conditions of THE ICONIC privileges without prior notice.", fontforMM, XBrushes.Black,
                    new XRect(30, 910, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("9. Privilege Bookတွင် ဖော်ပြထားသော ဝန်ဆောင်မှုများ အသုံးပြုရာတွင် အဆင်မပြေမှုများပေါ်ပေါက်လာပါက A bankနှင့် သက်ဆိုင်မှုမရှိပဲ merchantနဲ့သာ သက်ဆိုင်ပါသည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 930, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("A bank shall not be responsible and liable for the acts or defaults of the merchant or defects in the goods and service offered in the Privilege Book.", fontforMM, XBrushes.Black,
                    new XRect(30, 950, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("10. A bankသည် merchant၏ ကိုယ်စားလှယ်မဟုတ်ပါ။ ကုန်ပစ္စည်း (သို့) ဝန်ဆောင်မှု အရည်အသွေးများ ချို့ယွင်းချက်ရှိနေခြင်း များဖြစ်ပေါ်လာပါက merchantနဲ့သာ တိုက်ရိုက်ဖြေရှင်းရပါမည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 970, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("A bank is not an agent of the merchant. Any dispute or defects in the goods and services standard must be resolved directly with the merchant.", fontforMM, XBrushes.Black,
                    new XRect(30, 990, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("11.  သတ်မှတ်ထားသော အထက်ပါအချက်အလက်များအား ဖတ်ပြီးကြောင်းနှင့် အချက်အလက်များအား သဘောတူပါသည်။", fontforMM, XBrushes.Black,
                    new XRect(30, 1010, page.Width, 10),
                XStringFormats.CenterLeft);
                gfx.DrawString("I have read and agreed all terms and conditions mentioned above. ", fontforMM, XBrushes.Black,
                    new XRect(30, 1030, page.Width, 10),
                XStringFormats.CenterLeft);




                string timestamp = General.GetTimestamp(DateTime.Now);
                //footer
                gfx.DrawString($"THE ICONIC Call Center (+95) {iconicCallCenter}", font1, XBrushes.Gray,
                    new XRect(20, 750, page.Width, 50),
                    XStringFormats.CenterLeft);
                gfx.DrawString($"Standing with you", font, XBrushes.Black, new XRect(450, 750, 100, 0),
                    XStringFormats.CenterLeft);
                gfx.DrawString($"www.abank.com.mm", font1, XBrushes.Gray, new XRect(20, 760, page.Width, 10),
                    XStringFormats.CenterLeft);
                // Save the document...
                filename = $"{timestamp}_cifinfoTermsAndConditions.pdf";
                document.Save($"{CifPdf_Path}\\{filename}");


                return filename;
            }
            catch (Exception ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return null;
            }
        }
        private void DrawImage(XGraphics gfx)
        {

            //XImage image = XImage.FromFile(Server.MapPath("~/Images/new_pdf_bg.jpg"));

            /*  gfx.DrawImage(image, 50, 40, 500, 650);*/ //fixed image size => width 500, height 650
        }

        void DrawTitleImage(XGraphics gfxTitle)
        {
            XPen pen = new XPen(XColors.Gray, 0.5);
            gfxTitle.DrawLine(pen, 20, 25, 60, 25);
            gfxTitle.DrawLine(pen, 20, 27, 60, 27);
            XPdfFontOptions options = new XPdfFontOptions(PdfFontEncoding.Unicode, PdfFontEmbedding.Always);
            // Create a font
            XFont font = new XFont("Times New Roman", 5, XFontStyle.Bold, options);
            XFont font1 = new XFont("Times New Roman", 18, XFontStyle.Bold, options);
            gfxTitle.DrawString($"T H E", font, XBrushes.Gray, new XRect(63, 26, 60, 0),
                XStringFormats.CenterLeft);
            gfxTitle.DrawLine(pen, 78, 25, 117, 25);
            gfxTitle.DrawLine(pen, 78, 27, 117, 27);
            gfxTitle.DrawString($"I C O N I C", font1, XBrushes.Gray, new XRect(22, 38, 100, 0),
                XStringFormats.CenterLeft);
            gfxTitle.DrawLine(pen, 20, 48, 117, 48);
            gfxTitle.DrawLine(pen, 20, 50, 117, 50);
            //gfxTitle.DrawLine(pen, 100, 100, 100, 100);
            XImage image = XImage.FromFile(Server.MapPath("~/Images/pdftitle.jpg"));
            gfxTitle.DrawImage(image, 480, 20, 100, 30);
        }

        #region ReportCron

        public static RunCRONResponseModel RunCronService()
        {
            EventLogController log = new EventLogController();
            AdminDBContext db = new AdminDBContext();
            string controllerName = "CIFInfoModels";
            var resModel = new RunCRONResponseModel();
            try
            {
                var cronServiceDt =
                    db.ServiceManagements.Where(x => x.SERVICENAME == ConstantValues.IconicCronlog)
                        .Select(x => x.TimeFormat);
                int count = cronServiceDt.Count();
                if (count > 0)
                {
                    var cronScheduleModel = new CRONScheudleModel();
                    cronScheduleModel.Schedule = cronServiceDt.SingleOrDefault().ToString();
                    var cronLog = new CronLog();
                    cronLog.LOGMESSAGE = cronScheduleModel.Schedule;
                    cronLog.STARTDATE = DateTime.Now;
                    cronLog.RESPCODE = "003";
                    cronLog.RESPDESC = "SET TIMER";
                    cronLog.TASKNAME = ConstantValues.IconicCronlog;
                    cron_daemon.AddJob(cronScheduleModel.Schedule, CronTask);
                    cron_daemon.Start();
                    cronLog.ENDDATE = DateTime.Now;
                    db.CronLogs.Add(cronLog);
                    db.SaveChanges();
                    resModel.RespCode = "000";
                    resModel.RespDescription = "SUCCESS";

                }
                else
                {
                    resModel.RespCode = "999";
                    resModel.RespDescription =
                        "There is no row for Service name CRONLOG in TBL_SERVICEMANAGEMENT table.";
                }
                return resModel;
            }
            catch (Exception ex)
            {
                log.Error("0", controllerName, "RunCronService", ex);

            }
            return resModel;
        }

        public static void CronTask()
        {
            AdminDBContext db = new AdminDBContext();
            string controllerName = "CIFInfoModels";

            try
            {
                var datetime = DateTime.Now;
                var cronServiceDt =
                    db.ServiceManagements.Where(x => x.SERVICENAME == ConstantValues.IconicReportCron)
                        .Select(x => x.TimeFormat);
                int count = cronServiceDt.Count();
                if (count > 0)
                {
                    var timeFormat = cronServiceDt.SingleOrDefault();
                    if (datetime.Hour.ToString() == timeFormat) //+ ":" + datetime.Minute.ToString()

                    {
                        var dt = db.CronLogs.Where(x => x.RESPCODE == "003");
                        int logcount = dt.Count();
                        if (logcount > 0)
                        {
                            var Log2 = new CronLog();
                            Log2.TASKNAME = ConstantValues.IconicReportCron;
                            Log2.RESPCODE = "004";
                            Log2.RESPDESC = "Starting";
                            db.CronLogs.Add(Log2);
                            db.SaveChanges();
                            try
                            {
                                IconicReportTask();
                            }
                            catch (Exception ex)
                            {
                                var errLog = new CronLog();
                                errLog.TASKNAME = ConstantValues.IconicReportCron;
                                errLog.RESPCODE = "999";
                                errLog.RESPDESC = ex.Message;
                                db.CronLogs.Add(errLog);
                                db.SaveChanges();
                            }


                        }
                    }


                }

            }
            catch (Exception ex)
            {
                var errLog = new CronLog();
                errLog.TASKNAME = ConstantValues.IconicReportCron;
                errLog.RESPCODE = "999";
                errLog.RESPDESC = ex.Message;
                db.CronLogs.Add(errLog);
                db.SaveChanges();

            }

        }

        public static void IconicReportTask()
        {
            EventLogController log = new EventLogController();
            AdminDBContext db = new AdminDBContext();
            var TotalCount = 0;
            var SuccessCount = 0;
            var FailCount = 0;
            try
            {
                DateTime oldestDate = DateTime.Now.Subtract(new TimeSpan(10, 0, 0, 0, 0));
                string filename = ExcelExportReport(oldestDate);
                List<string> mailList = new List<string>();
                var emaillistInfo = db.CIFInfoModels.Where(x => x.Status == 1 && (x.CREATEDDATE >= oldestDate && x.CREATEDDATE <= DateTime.Now)).Select(x => new { x.UserEmail, x.ApproverEmail }).Distinct().ToList();
                if (emaillistInfo != null)
                {
                    foreach (var item in emaillistInfo)
                    {
                        TotalCount++;
                        mailList.Add(item.UserEmail);
                        mailList.Add(item.ApproverEmail);

                    }
                }

                #region sendEmail
                bool sendEmail = SendEmailForIconicReport(mailList, "", "CIFInfoModels", filename, "IconicReportTask");
                if (sendEmail)
                {
                    var logMsg =
                        $"Total Count : {TotalCount}";
                    var Log2 = new CronLog();
                    Log2.TASKNAME = ConstantValues.IconicReportCron;
                    Log2.RESPCODE = "000";
                    Log2.RESPDESC = "Success";
                    Log2.LOGMESSAGE = logMsg;
                    Log2.ENDDATE = DateTime.Now;
                    db.CronLogs.Add(Log2);
                    db.SaveChanges();

                }
                else
                {
                    var Log2 = new CronLog();
                    Log2.TASKNAME = ConstantValues.IconicReportCron;
                    Log2.RESPCODE = "014";
                    Log2.ENDDATE = DateTime.Now;
                    db.CronLogs.Add(Log2);
                    db.SaveChanges();
                }
                #endregion


            }
            catch (Exception ex)
            {
                var Log2 = new CronLog();
                Log2.TASKNAME = ConstantValues.IconicReportCron;
                Log2.RESPCODE = "014";
                Log2.RESPDESC = ex.Message;
                Log2.ENDDATE = DateTime.Now;
                db.CronLogs.Add(Log2);
                db.SaveChanges();
                log.Error("0", "CIFInfoModels", "IconicReportTask", ex);

            }
        }

        public static string ExcelExportReport(DateTime oldestDate)
        {
            string filename = string.Empty;
            string datestamp = General.GetDatestamp(DateTime.Now);
            string CSVFile_Path = ConstantValues.CSVIconicFile_Path;
            //create if folder doesn't exist
            if (!Directory.Exists(CSVFile_Path))
            {
                Directory.CreateDirectory(CSVFile_Path);
            }
            filename = $"{datestamp}_THEICONICNewRegistration" + ".xlsx";

            string path = $"{CSVFile_Path}";
            string filepath = $"{path}\\{filename}";

            AdminDBContext db = new AdminDBContext();
            var dbInfo = db.CIFInfoModels.Where(x => x.Status == 1 && (x.CREATEDDATE >= oldestDate && x.CREATEDDATE <= DateTime.Now)).ToList();
            List<CIFInfoModel> FileData = dbInfo.ToList();
            try
            {

                DataTable Dt = new DataTable();
                Dt.Columns.Add("CIFID", typeof(string));
                Dt.Columns.Add("THE ICONIC Tier", typeof(string));
                Dt.Columns.Add("THE ICONIC Number", typeof(string));
                Dt.Columns.Add("THE ICONIC Effective Date", typeof(string));
                Dt.Columns.Add("THE ICONIC Expire Date", typeof(string));
                Dt.Columns.Add("RM ID", typeof(string));
                Dt.Columns.Add("RM Name", typeof(string));
                Dt.Columns.Add("User's e-mail", typeof(string));
                Dt.Columns.Add("RM's e-mail", typeof(string));
                Dt.Columns.Add(" RM TL's e-mail", typeof(string));

                foreach (var data in FileData)
                {
                    DataRow row = Dt.NewRow();
                    row[0] = data.CIFID;
                    row[1] = data.USERTYPE;
                    row[2] = data.USERTYPECODE;
                    row[3] = data.EFFECTIVEDATE.ToString("MM/yy");
                    row[4] = data.EXPIREDATE.ToString("MM/yy");
                    row[5] = data.RMID;
                    row[6] = data.RMName;
                    row[7] = data.UserEmail;
                    row[8] = (from s in db.Users where s.Id == data.RMID.ToString() && s.DEL_FLAG == false select s.Email).SingleOrDefault();
                    int RM_TL_ID = (from s in db.RM_Info where s.ID == data.RMID && s.DEL_FLAG == false select s.RM_TL_ID).SingleOrDefault();
                    row[9] = (from s in db.RM_TL_Info where s.ID == RM_TL_ID && s.DEL_FLAG == false select s.Email).SingleOrDefault();
                    Dt.Rows.Add(row);

                }

                var memoryStream = new MemoryStream();
                using (var excelPackage = new ExcelPackage(memoryStream))
                {
                    var worksheet = excelPackage.Workbook.Worksheets.Add("Sheet1");
                    worksheet.Cells["A1"].LoadFromDataTable(Dt, true, TableStyles.None);
                    worksheet.Cells["A1:AN1"].Style.Font.Bold = true;
                    worksheet.DefaultRowHeight = 18;
                    worksheet.Column(2).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                    worksheet.Column(6).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    worksheet.Column(7).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    worksheet.DefaultColWidth = 20;
                    worksheet.Column(2).AutoFit();
                    //byte[] data = excelPackage.GetAsByteArray() as byte[];
                    // Write content to excel file  
                    System.IO.File.WriteAllBytes(filepath, excelPackage.GetAsByteArray());
                    //Close Excel package 
                    worksheet.Dispose();
                    return filename;
                }
            }
            catch (Exception ex)
            {
                throw;
            }


        }

        public static RunCRONResponseModel RunCronServiceForWeekday()
        {
            EventLogController log = new EventLogController();
            AdminDBContext db = new AdminDBContext();
            string controllerName = "CIFInfoModels";
            var resModel = new RunCRONResponseModel();
            try
            {
                var cronServiceDt =
                    db.ServiceManagements.Where(x => x.SERVICENAME == ConstantValues.IconicCronlogForWeekday)
                        .Select(x => x.TimeFormat);
                int count = cronServiceDt.Count();
                if (count > 0)
                {
                    var cronScheduleModel = new CRONScheudleModel();
                    cronScheduleModel.Schedule = cronServiceDt.SingleOrDefault().ToString();
                    var cronLog = new CronLog();
                    cronLog.LOGMESSAGE = cronScheduleModel.Schedule;
                    cronLog.STARTDATE = DateTime.Now;
                    cronLog.RESPCODE = "005";
                    cronLog.RESPDESC = "SET TIMER";
                    cronLog.TASKNAME = ConstantValues.IconicCronlogForWeekday;
                    cron_daemon.AddJob(cronScheduleModel.Schedule, CronTaskForWeekday);
                    cron_daemon.Start();
                    cronLog.STARTDATE = DateTime.Now;
                    cronLog.ENDDATE = DateTime.Now;
                    db.CronLogs.Add(cronLog);
                    db.SaveChanges();
                    resModel.RespCode = "000";
                    resModel.RespDescription = "SUCCESS";

                }
                else
                {
                    resModel.RespCode = "999";
                    resModel.RespDescription =
                        "There is no row for Service name CRONLOG in TBL_SERVICEMANAGEMENT table.";
                }
                return resModel;
            }
            catch (Exception ex)
            {
                log.Error("0", controllerName, "RunCronService", ex);

            }
            return resModel;
        }

        public static void CronTaskForWeekday()
        {
            AdminDBContext db = new AdminDBContext();
            string controllerName = "CIFInfoModels";

            try
            {
                var datetime = DateTime.Now;
                var cronServiceDt =
                    db.ServiceManagements.Where(x => x.SERVICENAME == ConstantValues.IconicReportCronForWeekday)
                        .Select(x => x.TimeFormat);
                int count = cronServiceDt.Count();
                if (count > 0)
                {
                    var timeFormat = cronServiceDt.SingleOrDefault();
                    if(datetime.Hour.ToString() == timeFormat) //+ ":" + datetime.Minute.ToString()
                    {
                       var dt = (from a in db.CronLogs
                                    where a.STARTDATE.Equals(DateTime.Now.ToString("yyyyMMdd")) &&
                                    a.RESPCODE== "006" 
                                    select a).OrderByDescending(a=>a.ID).ToList();
                        int logcount = dt.Count();
                        if (logcount == 0)
                        {
                            var Log2 = new CronLog();
                            Log2.TASKNAME = ConstantValues.IconicReportCronForWeekday;
                            Log2.RESPCODE = "006";
                            Log2.RESPDESC = "Starting";
                            Log2.STARTDATE = DateTime.Now;
                            Log2.ENDDATE = DateTime.Now;
                            db.CronLogs.Add(Log2);
                            db.SaveChanges();
                            try
                            {
                                IconicReportTaskForWeekday();
                            }
                            catch (Exception ex)
                            {
                                var errLog = new CronLog();
                                errLog.TASKNAME = ConstantValues.IconicReportCronForWeekday;
                                errLog.RESPCODE = "999";
                                errLog.RESPDESC = ex.Message;
                                errLog.STARTDATE = DateTime.Now;
                                errLog.ENDDATE = DateTime.Now;
                                db.CronLogs.Add(errLog);
                                db.SaveChanges();
                            }


                        }
                    }


                }

            }
            catch (Exception ex)
            {
                var errLog = new CronLog();
                errLog.TASKNAME = ConstantValues.IconicReportCron;
                errLog.RESPCODE = "999";
                errLog.RESPDESC = ex.Message;
                errLog.STARTDATE = DateTime.Now;
                errLog.ENDDATE = DateTime.Now;
                db.CronLogs.Add(errLog);
                db.SaveChanges();

            }

        }

        public static void IconicReportTaskForWeekday()
        {
            EventLogController log = new EventLogController();
            AdminDBContext db = new AdminDBContext();
            var TotalCount = 0;
            var SuccessCount = 0;
            var FailCount = 0;
            bool sendEmail = false;
            string status=String.Empty;
            try
            {
                #region Registration
                var emaillistInfo = db.CIFInfoModels.Where(x => x.Status == 0 && x.UpgradeStatus == 0 && x.DeactivateStatus == 0 && x.DELFLAG==false).Select(x => new { x.ApproverEmail }).Distinct().ToList();
                if (emaillistInfo != null)
                {
                    foreach (var item in emaillistInfo)
                    {
                        TotalCount++;
                        status = "registration";
                        string filename = ExcelExportReportForWeekday(item.ApproverEmail,status);
                        sendEmail = SendEmailForIconicReportForWeekday(item.ApproverEmail,status, "", "CIFInfoModels", filename, "IconicReportTask");


                    }
                }

                #endregion

                #region Edit
                var emaillistInfoForEdit = db.CIFInfoModels.Where(x => x.Status == 3 && x.UpgradeStatus == 0 && x.DeactivateStatus == 0 && x.DELFLAG == false).Select(x => new { x.ApproverEmail }).Distinct().ToList();
                if (emaillistInfoForEdit != null)
                {
                    foreach (var item in emaillistInfoForEdit)
                    {
                        TotalCount++;
                        status = "edit";
                        string filename = ExcelExportReportForWeekday(item.ApproverEmail,status);
                        sendEmail = SendEmailForIconicReportForWeekday(item.ApproverEmail, status, "", "CIFInfoModels", filename, "IconicReportTask");


                    }
                }

                #endregion

                #region upgrade
                var emaillistInfoForUpgrade = db.CIFInfoModels.Where(x => x.Status == 1 && x.UpgradeStatus == 1 && x.DeactivateStatus == 0 && x.DELFLAG == false).Select(x => new { x.ApproverEmail }).Distinct().ToList();
                if (emaillistInfoForUpgrade != null)
                {
                    foreach (var item in emaillistInfoForUpgrade)
                    {
                        TotalCount++;
                        status = "upgrade";
                        string filename = ExcelExportReportForWeekday(item.ApproverEmail, status);
                        sendEmail = SendEmailForIconicReportForWeekday(item.ApproverEmail, status, "", "CIFInfoModels", filename, "IconicReportTask");


                    }
                }

                #endregion

                #region deactivate
                var emaillistInfoForDeactive = db.CIFInfoModels.Where(x => x.Status == 1 && x.UpgradeStatus == 0 && x.DeactivateStatus == 1 && x.DELFLAG == false).Select(x => new { x.ApproverEmail }).Distinct().ToList();
                if (emaillistInfoForDeactive != null)
                {
                    foreach (var item in emaillistInfoForDeactive)
                    {
                        TotalCount++;
                        status = "upgrade";
                        string filename = ExcelExportReportForWeekday(item.ApproverEmail, status);
                        sendEmail = SendEmailForIconicReportForWeekday(item.ApproverEmail, status, "", "CIFInfoModels", filename, "IconicReportTask");


                    }
                }

                #endregion

                if (sendEmail)
                {
                    var logMsg =
                        $"Total Count : {TotalCount}";
                    var Log2 = new CronLog();
                    Log2.TASKNAME = ConstantValues.IconicReportCronForWeekday;
                    Log2.RESPCODE = "000";
                    Log2.RESPDESC = "Success";
                    Log2.LOGMESSAGE = logMsg;
                    Log2.STARTDATE = DateTime.Now;
                    Log2.ENDDATE = DateTime.Now;
                    db.CronLogs.Add(Log2);
                    db.SaveChanges();

                }
                else
                {
                    var Log2 = new CronLog();
                    Log2.TASKNAME = ConstantValues.IconicReportCronForWeekday;
                    Log2.RESPCODE = "014";
                    Log2.STARTDATE = DateTime.Now;
                    Log2.ENDDATE = DateTime.Now;
                    db.CronLogs.Add(Log2);
                    db.SaveChanges();
                }
             
            }
            catch (Exception ex)
            {
                var Log2 = new CronLog();
                Log2.TASKNAME = ConstantValues.IconicReportCronForWeekday;
                Log2.RESPCODE = "014";
                Log2.RESPDESC = ex.Message;
                Log2.STARTDATE = DateTime.Now;
                Log2.ENDDATE = DateTime.Now;
                db.CronLogs.Add(Log2);
                db.SaveChanges();
                log.Error("0", "CIFInfoModels", "IconicReportTaskForWeekday", ex);

            }
        }

        public static string ExcelExportReportForWeekday(string email,string status)
        {
            string filename = string.Empty;
            string datestamp = General.GetDatestamp(DateTime.Now);
            string CSVFile_Path = ConstantValues.CSVIconicFile_Path;
            //create if folder doesn't exist
            if (!Directory.Exists(CSVFile_Path))
            {
                Directory.CreateDirectory(CSVFile_Path);
            }
            filename = $"{datestamp}_THEICONICPendingCustomerInformation" + ".xlsx";

            string path = $"{CSVFile_Path}";
            string filepath = $"{path}\\{filename}";

            AdminDBContext db = new AdminDBContext();
            var dbInfo = new List<CIFInfoModel>();
            if (status.Equals("registration"))
            {
                 dbInfo = db.CIFInfoModels.Where(x => x.Status == 0 && x.UpgradeStatus == 0 && x.DeactivateStatus == 0 && x.ApproverEmail == email && x.DELFLAG == false).ToList();

            }
            else if (status.Equals("edit"))
            {
                dbInfo = db.CIFInfoModels.Where(x => x.Status == 4 && x.UpgradeStatus == 0 && x.DeactivateStatus == 0 && x.ApproverEmail == email && x.DELFLAG == false).ToList();

            }
            else if (status.Equals("upgrade"))
            {
                dbInfo = db.CIFInfoModels.Where(x => x.Status == 1 && x.UpgradeStatus == 1 && x.DeactivateStatus == 0 && x.ApproverEmail == email && x.DELFLAG == false).ToList();

            }
            else if (status.Equals("deactivate"))
            {
                dbInfo = db.CIFInfoModels.Where(x => x.Status == 1 && x.UpgradeStatus == 0 && x.DeactivateStatus == 1 && x.ApproverEmail == email && x.DELFLAG == false).ToList();

            }
            List<CIFInfoModel> FileData = dbInfo.ToList();
            try
            {

                DataTable Dt = new DataTable();
                Dt.Columns.Add("CIFID", typeof(string));
                Dt.Columns.Add("NAME", typeof(string));

                foreach (var data in FileData)
                {
                    DataRow row = Dt.NewRow();
                    row[0] = data.CIFID;
                    row[1] = data.NAME;
                    Dt.Rows.Add(row);

                }

                var memoryStream = new MemoryStream();
                using (var excelPackage = new ExcelPackage(memoryStream))
                {
                    var worksheet = excelPackage.Workbook.Worksheets.Add("Sheet1");
                    worksheet.Cells["A1"].LoadFromDataTable(Dt, true, TableStyles.None);
                    worksheet.Cells["A1:AN1"].Style.Font.Bold = true;
                    worksheet.DefaultRowHeight = 18;
                    worksheet.Column(2).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                    worksheet.Column(6).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    worksheet.Column(7).Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                    worksheet.DefaultColWidth = 20;
                    worksheet.Column(2).AutoFit();
                    //byte[] data = excelPackage.GetAsByteArray() as byte[];
                    // Write content to excel file  
                    System.IO.File.WriteAllBytes(filepath, excelPackage.GetAsByteArray());
                    //Close Excel package 
                    worksheet.Dispose();
                    return filename;
                }
            }
            catch (Exception ex)
            {
                throw;
            }


        }

#endregion

        #region SendEmail
        //Get Email Template
        public static General.SMTPSetting GetEmailSetting()
        {
            AdminDBContext db = new AdminDBContext();

            General.SMTPSetting setting = new General.SMTPSetting();
            var mail = (from a in db.Credentials
                        where a.Status == "1" & a.Name == "MailSetting"
                        select a).ToList();
            setting.SenderMail = mail.Where(a => a.Key == "sendermail").Select(n => n.Value).FirstOrDefault();
            setting.SenderName = mail.Where(a => a.Key == "sendername").Select(n => n.Value).FirstOrDefault();
            setting.Password = mail.Where(a => a.Key == "password").Select(n => n.Value).FirstOrDefault();
            setting.Host = mail.Where(a => a.Key == "host").Select(n => n.Value).FirstOrDefault();
            int port = Convert.ToInt32(mail.Where(m => m.Key == "port").Select(m => m.Value).FirstOrDefault());
            setting.Port = port;
            return setting;
        }
        //Validate EmailAddress
        public static bool IsEmailValid(string emailaddress)
        {
            try
            {
                MailAddress m = new MailAddress(emailaddress);
                return true;
            }
            catch (FormatException)
            {
                return false;
            }
        }

        private EmailTemplate Template(string Type)
        {
            var template = db.EmailTemplates.Where(t => t.Type == Type).FirstOrDefault();
            return template;
        }

        public static Boolean SendEmailForIconic(List<string> mailList, string cifid, string userid, string controller, string action)
        {
            EventLogController log = new EventLogController();
            AdminDBContext db = new AdminDBContext();


            try
            {
                //Validate Email Allow
                var tranretail = "THE ICONIC User Management";
                //Get Data For Email
                General.SMTPSetting setting = GetEmailSetting();
                var template = from t in db.EmailTemplates
                               where t.Type == "Registration"
                               select t;
                var Subject = template.Select(s => s.Subject).FirstOrDefault().ToString();
                var Body = template.Select(b => b.Body).FirstOrDefault().ToString();
                Body = Body.Replace("[CIFID]", cifid);
                if (mailList.Count > 0)
                {
                    foreach (var item in mailList)
                    {
                        if (IsEmailValid(item))
                        {
                            bool sentmail = General.SendEmailForICONIC(item, Subject, Body, setting);
                            //log for email
                            if (sentmail)
                                log.Log(userid, controller, "SendEmailForIconic", $"Email Sent successfully.",
                                    $"Email Address is {item}.");
                            else
                            {
                                log.Log(userid, controller, "SendEmailForIconic", $"Send Email failed.",
                                    $"Email Address is {item}.");

                            }
                        }
                        else
                        {
                            log.Log(userid, controller, "SendEmailForIconic", $"Send Email failed.", $"This {item} Email Address is Invalid .");

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(userid, controller, "SendEmailForIconic", ex);
                return false;
            }

            return true;
        }

        public static Boolean SendEmailForIconicReport(List<string> mailList, string userid, string controller, string filename, string action)
        {
            EventLogController log = new EventLogController();
            AdminDBContext db = new AdminDBContext();
            try
            {

                //Get Data For Email
                General.SMTPSetting setting = GetEmailSetting();
                var template = from t in db.EmailTemplates
                               where t.Type == "iconic_report"
                               select t;
                var Subject = template.Select(s => s.Subject).FirstOrDefault().ToString();
                var Body = template.Select(b => b.Body).FirstOrDefault().ToString();
                if (mailList.Count > 0)
                {
                    foreach (var item in mailList)
                    {
                        if (IsEmailValid(item))
                        {
                            Body = Body.Replace("[SenderName]", (item.ToString()));
                            bool sentmail = General.SendEmailForICONICReport(item, Subject, Body, filename, setting);
                            //log for email
                            if (sentmail)
                                log.Log(userid, controller, "SendEmailForIconic", $"Email Sent successfully.",
                                    $"Email Address is {item}.");
                            else
                            {
                                log.Log(userid, controller, "SendEmailForIconic", $"Send Email failed.",
                                    $"Email Address is {item}.");

                            }
                        }
                        else
                        {
                            log.Log(userid, controller, "SendEmailForIconic", $"Send Email failed.", $"This {item} Email Address is Invalid .");

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(userid, controller, "SendEmailForIconic", ex);
                return false;
            }

            return true;
        }

        public static Boolean SendEmailForIconicReportForWeekday(string mailList,string status, string userid, string controller, string filename, string action)
        {
            EventLogController log = new EventLogController();
            AdminDBContext db = new AdminDBContext();
            try
            {

                //Get Data For Email
                General.SMTPSetting setting = GetEmailSetting();
                var template = from t in db.EmailTemplates
                               where t.Type == "iconic_weekday_reminder"
                               select t;
                var Subject = template.Select(s => s.Subject).FirstOrDefault().ToString();
                Subject = Subject.Replace("[Status]", (status.ToString()));
                var Body = template.Select(b => b.Body).FirstOrDefault().ToString();
                if (IsEmailValid(mailList))
                {
                    Body = Body.Replace("[Status]", (status.ToString()));
                    Body = Body.Replace("[email]", (mailList.ToString()));
                    Body = Body.Replace("[Link]", (ConstantValues.IconicMailRoute.ToString()));
                    bool sentmail = General.SendEmailForICONICReport(mailList, Subject, Body, filename, setting);
                    //log for email
                    if (sentmail)
                        log.Log(userid, controller, "SendEmailForIconic", $"Email Sent successfully.",
                            $"Email Address is {mailList}.");
                    else
                    {
                        log.Log(userid, controller, "SendEmailForIconic", $"Send Email failed.",
                            $"Email Address is {mailList}.");

                    }
                }
                else
                {
                    log.Log(userid, controller, "SendEmailForIconic", $"Send Email failed.", $"This {mailList} Email Address is Invalid .");

                }
                
            }
            catch (Exception ex)
            {
                log.Error(userid, controller, "SendEmailForIconic", ex);
                return false;
            }

            return true;
        }

        #endregion

        #region Iconic Approver
        public ActionResult InconicApprover()
        {
            try
            {
                TempData["Stage"] = string.Empty;
                var data = db.CIFInfoModels.ToList();
                int count = data.Count();

                if (count > 0)
                {
                    return View(db.CIFInfoModels.ToList());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View();
        }

        [HttpPost]
        public ActionResult InconicApprover(int? arg1)
        {
            int recordsTotal = 0;
            //jQuery DataTables Param
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            //Find paging info
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            //Find order columns info
            var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault()
                                    + "][name]").FirstOrDefault();
            var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            //find search columns info
            var cifid = Request.Form.GetValues("columns[1][search][value]").FirstOrDefault();
            var username = Request.Form.GetValues("columns[2][search][value]").FirstOrDefault();
            var usertype = Request.Form.GetValues("columns[3][search][value]").FirstOrDefault();

            int pageSize = length != null ? Convert.ToInt32(length) : 10;
            int skip = start != null ? Convert.ToInt16(start) : 0;
            var rule = db.UserTypeModels.Where(r => r.DEL_FLAG == false).FirstOrDefault();
            int ruleValue = (rule == null ? 5 : rule.ID);
            var user = db.CIFInfoModels.Where(a => a.DELFLAG == false && a.Status == 1 && a.DeactivateStatus == 0 && a.UpgradeStatus == 1).ToList().ConvertAll(u => new CIFInfoVM
            {
                PHONENO = u.PHONENO,
                NAME = u.NAME,
                USERTYPE = u.USERTYPE,
                USERTYPECODE = u.USERTYPECODE,
                EXPIREDATE = u.EXPIREDATE,
                strEXPIREDATE = String.Format("{0:MM-yy}", u.EXPIREDATE),
                NRC = u.NRC,
                Address = u.ADDRESS,
                CIFID = u.CIFID,
                ID = u.ID,
                REMARK = u.REMARK,
                Createduserid = u.CREATEDUSERID,
                Status = u.Status.ToString(),
                UpgradeStatus = u.UpgradeStatus.ToString()
            });

            //SEARCHING...

            if (!string.IsNullOrEmpty(cifid.Trim()))
            {
                user = user.Where(a => a.CIFID.ToLower().Contains(cifid.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(username.Trim()))
            {
                //int branchid = Convert.ToInt32(username);
                user = user.Where(a => a.NAME.ToLower().Contains(username.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(usertype))
            {
                //user = user.Where(a => a.USER_TYPE.Contains(usertype)).ToList();
                user = user.Where(a => a.USERTYPE == usertype).ToList();
            }

            ////SORTING...  (For sorting we need to add a reference System.Linq.Dynamic)
            if (!(string.IsNullOrEmpty(sortColumn)) && !(string.IsNullOrEmpty(sortColumnDir)))
            {
                user = user.OrderBy(sortColumn + " " + sortColumnDir).ToList();
            }
            foreach (var item in user)
            {
                if (item.Createduserid != null)
                {
                    item.Createduserid = db.Users.Where(x => x.Id == item.Createduserid).Select(x => x.UserName).FirstOrDefault();
                }
                if (item.UpgradeStatus == "1")
                {
                    item.Status = "Pending";
                }
                else if (item.UpgradeStatus == "2")
                {
                    item.Status = "Already Approved";
                }
                else if (item.UpgradeStatus == "3")
                {
                    item.Status = "Already Rejected";

                }

            }
            recordsTotal = user.Count();
            var data = user.Skip(skip).Take(pageSize).ToList();
            //carry pdf filename to download or null
            if (TempData["filename"] != null && TempData["filename"].ToString() != "")
                ViewBag.filename = TempData["filename"];
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data },
                JsonRequestBehavior.AllowGet);
        }

        public ActionResult IconicApproverEdit(int? id, string stage)
        {
            if (stage != null)
            {
                ViewBag.FromStage = stage;
                TempData["Stage"] = stage;
            }
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
            if (cIFInfoModel == null)
            {
                return HttpNotFound();
            }
            CIFInfoVMForApprover infoVm = new CIFInfoVMForApprover();
            infoVm = JsonConvert.DeserializeObject<CIFInfoVMForApprover>(JsonConvert.SerializeObject(cIFInfoModel));
            infoVm.strEXPIREDATE = infoVm.EXPIREDATE.ToString("MM/yy");
            infoVm.strEffectiveDate = infoVm.EffectiveDate.ToString("MM/yy");
            infoVm.DeactivateDate = DateTime.Now;
            if (infoVm.DeactivateDate == null)
            {
                infoVm.strDeactivateDate = null;
            }
            else
            {
                infoVm.strDeactivateDate = infoVm.DeactivateDate?.ToString("dd/MM/yyyy");
            }
            infoVm.RMEmail = (from s in db.RM_Info where s.ID == infoVm.RMID && s.DEL_FLAG == false select s.Email).SingleOrDefault();
            int RM_TL_ID = (from s in db.RM_Info where s.ID == infoVm.RMID && s.DEL_FLAG == false select s.RM_TL_ID).SingleOrDefault();
            infoVm.RM_TL_Email = (from s in db.RM_TL_Info where s.ID == RM_TL_ID && s.DEL_FLAG == false select s.Email).SingleOrDefault();
            return View(infoVm);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult IconicApproverEdit(CIFInfoVMForApprover infoVm)
        {
            try
            {

                if (ModelState.IsValid)
                {
                    #region Data preparation
                    var DbInfo = (from s in db.CIFInfoModels where s.ID == infoVm.ID && s.DELFLAG == false select s).SingleOrDefault();
                    DbInfo.UPDATEDUSERID = User.Identity.GetUserId();
                    DbInfo.UpdatedDate = DateTime.Now;
                    var approverEmail = DbInfo.ApproverEmail;
                    DbInfo.UserEmail = infoVm.UserEmail;
                    if (TempData["Stage"].ToString() == "Approve")
                    {
                        if (DbInfo.UpgradeStatus == 1 && DbInfo.Status == 1 && DbInfo.DeactivateStatus == 0)
                        {
                            DbInfo.UpgradeStatus = 2;
                        }
                    }
                    else
                    {

                        if (DbInfo.UpgradeStatus == 1 && DbInfo.Status == 1 && DbInfo.DeactivateStatus == 0)
                        {
                            DbInfo.UpgradeStatus = 3;
                        }

                    }
                    if (!string.IsNullOrEmpty(infoVm.strDeactivateDate))
                    {
                        var deactivate = infoVm.strDeactivateDate.Replace("/", "-");
                        DbInfo.DeactivateDate = General.ConvertStrToDate(deactivate);
                    }

                    DbInfo.ApproverEmail = approverEmail;
                    #endregion
                    var localEntity = db.Set<CIFInfoModel>().Local.FirstOrDefault(f => f.ID == DbInfo.ID);
                    if (localEntity != null)
                    {
                        db.Entry(localEntity).State = EntityState.Detached;
                    }
                    db.Entry(DbInfo).State = EntityState.Modified;
                    db.SaveChanges();
                }
                //save log
                ViewBag.CifCreateInfo = "\"" + infoVm.CIFID + "\"";
                string getuserid = User.Identity.GetUserId();
                log.Info(getuserid, controllerName, "Edit", 2, $"{infoVm.CIFID} Upgrade is approved.");
                List<string> mailList = new List<string>();
                if (infoVm.RMEmail != null)
                {
                    mailList.Add(infoVm.RMEmail);
                }

                mailList.Add(infoVm.UserEmail);
                mailList.Add(infoVm.RM_TL_Email);
                #region sendEmail
                bool sendEmail = CIFInfoModelsController.SendEmailForIconic(mailList, infoVm.CIFID, getuserid, controllerName, "IconicApproverEdit");
                #endregion
                return View(infoVm);

            }
            catch (Exception ex)
            { throw ex; }
            return View();

        }


        #endregion

        #region Iconic Upgrade (Tier 2--> Tier 1) LOT 
        public ActionResult GetCifInfoList()
        {
            try
            {
                var data = db.CIFInfoModels.ToList();
                int count = data.Count();

                if (count > 0)
                {
                    return View(db.CIFInfoModels.ToList());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View();
        }

        [HttpPost]
        public ActionResult GetCifInfoList(int? arg1)
        {
            int recordsTotal = 0;
            //jQuery DataTables Param
            var draw = Request.Form.GetValues("draw").FirstOrDefault();
            //Find paging info
            var start = Request.Form.GetValues("start").FirstOrDefault();
            var length = Request.Form.GetValues("length").FirstOrDefault();
            //Find order columns info
            var sortColumn = Request.Form.GetValues("columns[" + Request.Form.GetValues("order[0][column]").FirstOrDefault()
                                    + "][name]").FirstOrDefault();
            var sortColumnDir = Request.Form.GetValues("order[0][dir]").FirstOrDefault();
            //find search columns info
            var cifid = Request.Form.GetValues("columns[1][search][value]").FirstOrDefault();
            var username = Request.Form.GetValues("columns[2][search][value]").FirstOrDefault();
            var usertype = Request.Form.GetValues("columns[3][search][value]").FirstOrDefault();

            int pageSize = length != null ? Convert.ToInt32(length) : 10;
            int skip = start != null ? Convert.ToInt16(start) : 0;
            var rule = db.UserTypeModels.Where(r => r.DEL_FLAG == false).FirstOrDefault();
            int ruleValue = (rule == null ? 5 : rule.ID);
            int currentYear = DateTime.Now.Year;
            var user = db.CIFInfoModels.Where(a => a.DELFLAG == false && a.DeactivateStatus == 0 && a.EXPIREDATE.Year == currentYear && a.Status == 1 && a.UpgradeStatus == 0).ToList().ConvertAll(u => new CIFInfoVM
            {
                PHONENO = u.PHONENO,
                NAME = u.NAME,
                USERTYPE = u.USERTYPE,
                USERTYPECODE = u.USERTYPECODE,
                EXPIREDATE = u.EXPIREDATE,
                strEXPIREDATE = String.Format("{0:MM-yy}", u.EXPIREDATE),
                NRC = u.NRC,
                Address = u.ADDRESS,
                CIFID = u.CIFID,
                ID = u.ID,
                REMARK = u.REMARK,
                Createduserid = u.CREATEDUSERID
            });

            //SEARCHING...

            if (!string.IsNullOrEmpty(cifid.Trim()))
            {
                user = user.Where(a => a.CIFID.ToLower().Contains(cifid.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(username.Trim()))
            {
                //int branchid = Convert.ToInt32(username);
                user = user.Where(a => a.NAME.ToLower().Contains(username.Trim().ToLower())).ToList();
            }
            if (!string.IsNullOrEmpty(usertype))
            {
                //user = user.Where(a => a.USER_TYPE.Contains(usertype)).ToList();
                user = user.Where(a => a.USERTYPE == usertype).ToList();
            }

            ////SORTING...  (For sorting we need to add a reference System.Linq.Dynamic)
            if (!(string.IsNullOrEmpty(sortColumn)) && !(string.IsNullOrEmpty(sortColumnDir)))
            {
                user = user.OrderBy(sortColumn + " " + sortColumnDir).ToList();
            }
            foreach (var item in user)
            {
                if (item.Createduserid != null)
                {
                    item.Createduserid = db.Users.Where(x => x.Id == item.Createduserid).Select(x => x.UserName).FirstOrDefault();
                }
            }
            recordsTotal = user.Count();
            var data = user.Skip(skip).Take(pageSize).ToList();
            //carry pdf filename to download or null
            if (TempData["filename"] != null && TempData["filename"].ToString() != "")
                ViewBag.filename = TempData["filename"];
            return Json(new { draw = draw, recordsFiltered = recordsTotal, recordsTotal = recordsTotal, data = data },
                JsonRequestBehavior.AllowGet);
        }

        public ActionResult EditCifInfoForUpgrade(int? id)
        {
            CIFInfoVM infoVm = new CIFInfoVM();

            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            CIFInfoModel cIFInfoModel = db.CIFInfoModels.Find(id);
            cIFInfoModel.DeactivateDate = Convert.ToDateTime(cIFInfoModel.DeactivateDate);

            if (cIFInfoModel == null)
            {
                return HttpNotFound();
            }
            infoVm = JsonConvert.DeserializeObject<CIFInfoVM>(JsonConvert.SerializeObject(cIFInfoModel));
            infoVm.strEXPIREDATE = infoVm.EXPIREDATE.ToString("MM/yy");
            infoVm.strEffectiveDate = infoVm.EffectiveDate.ToString("MM/yy");
            #region Generate Iconic Number
            bool IsContinue = true;
            int increasecount = 1;
            while (IsContinue)
            {
                //prepare for UserTypeCode 
                var prefix = string.Empty;
                var Codelength = db.UserTypeModels.Where(a => a.USERTYPE == infoVm.USERTYPE).ToList();
                int length = Codelength[0].GENERATED_LIMIT;
                var count =
                    db.CIFInfoModels.Where(x => x.USERTYPE == infoVm.USERTYPE && infoVm.DELFLAG == false)
                        .OrderByDescending(y => y.ID)
                        .Select(x => x.USERTYPECODE)
                        .ToList();
                int existno = 0;
                int check = 0;
                string UserTypecode = Codelength[0].USERTYPE_CODE_LIMIT.ToString();
                int Usertypecodelength = UserTypecode.Length;
                if (count.Count() > 0)
                {
                    string takecount = count[0].Substring(count[0].LastIndexOf("-") + 1);
                    char[] ch = { takecount[0], takecount[1] };
                    String str = takecount.TrimStart(ch);
                    existno = Convert.ToInt32(str);
                    check = existno.ToString().Length;
                }
                else
                {
                    check = 1;
                    existno = 0;
                }


                var newString = prefix.PadLeft((length - Usertypecodelength) - check, '0');
                string generatedCode = UserTypecode + newString + (existno + increasecount);
                if (generatedCode.Length == length)
                {
                    infoVm.USERTYPECODE = generatedCode;
                }
                #region CheckSameBookingNumber

                var checkbooking =
                     db.IconicBookingModels.Where(x => x.BOOKINGNUMBER == infoVm.USERTYPECODE).ToList();
                var checkblacklist =
                    db.IconicBlacklistModels.Where(x => x.BlackListNumber == infoVm.USERTYPECODE).ToList();
                if (checkbooking.Count > 0 || checkblacklist.Count > 0)
                {
                    increasecount += 1;
                    continue;
                }
                else
                {
                    IsContinue = false;
                }

                #endregion
            }
            #endregion 
            IEnumerable<SelectListItem> items2 = db.RM_Info.Where(b => b.DEL_FLAG == false)
                                   .Select(c => new SelectListItem
                                   {
                                       Selected = (c.ID == infoVm.RMID),
                                       Value = c.ID.ToString(),
                                       Text = c.Name
                                   }).ToList();

            ViewBag.RMList = items2;
            string userID = User.Identity.GetUserId();
            ViewBag.Emaillist = CIFInfoModelsController.GetApproverEmailList(userID);
            infoVm.UserEmail = (from s in db.Users where s.Id == userID && s.DEL_FLAG == false select s.Email).SingleOrDefault();
            Session["ApproverEmailList"] = ViewBag.Emaillist;
            Session["RMList"] = ViewBag.RMList;
            return View(infoVm);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditCifInfoForUpgrade(CIFInfoVM infoVm)
        {
            try
            {
                Session["CIFVMForEdit"] = string.Empty;
                if (ModelState.IsValid)
                {
                    #region Data preparation
                    var DbInfo = (from s in db.CIFInfoModels where s.ID == infoVm.ID && s.DELFLAG == false select s).SingleOrDefault();
                    DbInfo.UPDATEDUSERID = User.Identity.GetUserId();
                    DbInfo.UpdatedDate = DateTime.Now;
                    DbInfo.ApproverEmail = infoVm.ApproverEmail;
                    DbInfo.UserEmail = infoVm.UserEmail;
                    DbInfo.RMID = infoVm.RMID;
                    DbInfo.RMName = infoVm.RMName;
                    DbInfo.UpgradeStatus = 1;
                    DbInfo.USERTYPECODE = infoVm.USERTYPECODE;
                    #endregion
                    var localEntity = db.Set<CIFInfoModel>().Local.FirstOrDefault(f => f.ID == DbInfo.ID);
                    if (localEntity != null)
                    {
                        db.Entry(localEntity).State = EntityState.Detached;
                    }
                    db.Entry(DbInfo).State = EntityState.Modified;
                    db.SaveChanges();

                    //save log
                    string getuserid = User.Identity.GetUserId();
                    log.Info(getuserid, controllerName, "CIF_Upgrade", 2, $"{infoVm.CIFID} Upgrade is pending.");
                    ViewBag.CifCreateInfo = "\"" + infoVm.CIFID + "\"";
                    var getBranch = (from s in db.Users where s.Id == getuserid && s.DEL_FLAG == false select s).SingleOrDefault();
                    int branchid = getBranch.BranchID;
                    IEnumerable<SelectListItem> items2 = db.Users.Where(b => b.DEL_FLAG == false && b.BranchID == branchid && b.Email != null && b.Role == 3)
                                    .Select(c => new SelectListItem
                                    {
                                        Selected = (c.Email == infoVm.ApproverEmail),
                                        Value = c.Email.ToString(),
                                        Text = c.Email
                                    }).ToList();

                    ViewBag.Emaillist = items2;
                    List<string> mailList = new List<string>();
                    mailList.Add(infoVm.UserEmail);
                    mailList.Add(infoVm.ApproverEmail);
                    #region sendEmail
                    bool sendEmail = CIFInfoModelsController.SendEmailForIconic(mailList, infoVm.CIFID, getuserid, controllerName, "CIF_Upgrade");
                    #endregion
                    ViewBag.Emaillist = Session["ApproverEmailList"];
                    ViewBag.RMList = Session["RMList"];
                    return View(infoVm);
                }

            }
            catch (Exception ex)
            { throw ex; }
            return View();
        }

        #endregion

        #region Iconic Upgrade (Tier 2--> Tier 1) Before Expired Date

        public JsonResult getCIFIDInfo(string CIFID, string iconicno)
        {
            CIFInfoVMForDeactivator rri = new CIFInfoVMForDeactivator();
            CIFInfoModel info = new CIFInfoModel();
            try
            {
                if (CIFID != "" || iconicno != "")
                {
                    if (CIFID != "")
                    {
                        info =
                            (from s in db.CIFInfoModels where s.CIFID == CIFID && s.DELFLAG == false && s.Status == 1 && s.UpgradeStatus == 0 && s.DeactivateStatus == 0 select s)
                                .SingleOrDefault();

                    }
                    else
                    {
                        info =
                           (from s in db.CIFInfoModels where s.USERTYPECODE == iconicno && s.DELFLAG == false && s.Status == 1 && s.UpgradeStatus == 0 && s.DeactivateStatus == 0 select s)
                               .SingleOrDefault();
                    }
                    if (info == null)
                    {
                        return Json(new { message = "This CIFID is not registered" }, JsonRequestBehavior.AllowGet);

                    }
                    else
                    {
                        rri.PHONENO = info.PHONENO;
                        rri.NAME = info.NAME;
                        rri.USERTYPE = info.USERTYPE;
                        rri.USERTYPECODE = info.USERTYPECODE;
                        rri.EXPIREDATE = info.EXPIREDATE;
                        rri.EffectiveDate = info.EFFECTIVEDATE;
                        rri.strEXPIREDATE = String.Format("{0:MM-yy}", info.EXPIREDATE);
                        rri.strEffectiveDate = String.Format("{0:MM-yy}", info.EFFECTIVEDATE);
                        rri.NRC = info.NRC;
                        rri.Address = info.ADDRESS;
                        rri.CIFID = info.CIFID;
                        rri.ID = info.ID;
                        rri.RMName = info.RMName;
                        rri.RMID = info.RMID;
                        rri.BranchName = info.BRANCHNAME;

                    }
                    return Json(rri, JsonRequestBehavior.AllowGet);

                }
            }
            catch (Exception ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();

                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
            }
            return Json(rri, JsonRequestBehavior.AllowGet);
        }
        public ActionResult CreateCifInfoForUpgrade()
        {
            try
            {
                CIFInfoVMForDeactivator infoVm = new CIFInfoVMForDeactivator();
                if (TempData["createReturn"] == "1")
                {
                    if (Session["CIFVMForUpgradeReturn"] != null)
                    {
                        if (!string.IsNullOrEmpty(Session["CIFVMForUpgradeReturn"].ToString()))
                        {
                            infoVm = JsonConvert.DeserializeObject<CIFInfoVMForDeactivator>(Session["CIFVMForUpgradeReturn"].ToString());


                        }
                    }
                }
                else
                {

                    DateTime today = DateTime.Now;
                    DateTime addDate = today.AddDays(365);
                    DateTime addDate1 = today.AddDays(30);
                    infoVm.strEXPIREDATE = addDate.ToString("MM/yy");
                    infoVm.strEffectiveDate = addDate1.ToString("MM/yy");
                    infoVm.strDeactivateDate = today.ToString("dd-MM-yyyy");


                }

                return View(infoVm);
            }
            catch (Exception ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();

                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return View("Error");
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateCifInfoForUpgrade(CIFInfoVMForDeactivator infoVm)
        {
            TempData["createD"] = "1";
            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            try
            {
                if (ModelState.IsValid)
                {
                    if (string.IsNullOrEmpty(infoVm.USERTYPECODE))
                    {
                        string usertypecode = (from s in db.CIFInfoModels where s.USERTYPE == infoVm.USERTYPECODE && s.DELFLAG == false select s.USERTYPECODE).SingleOrDefault();
                        if (!usertypecode.Equals(infoVm.USERTYPECODE))
                        {
                            ModelState.AddModelError("USERTYPECODE", "THE ICONIC Number is Invalid");
                            return View(infoVm);
                        }

                    }
                    if (string.IsNullOrEmpty(infoVm.CIFID))
                    {
                        string cif = (from s in db.CIFInfoModels where s.CIFID == infoVm.CIFID && s.DELFLAG == false select s.USERTYPECODE).SingleOrDefault();
                        if (!cif.Equals(infoVm.CIFID))
                        {
                            ModelState.AddModelError("CIFID", "The CIFID is Invalid");
                            return View(infoVm);
                        }

                    }

                    //save log
                    Session["CIFVMForUpgrade"] = string.Empty;//To genereate PDF
                    Session["CIFVMForUpgrade"] = JsonConvert.SerializeObject(infoVm);
                    Session["CIFVMForUpgradeReturn"] = JsonConvert.SerializeObject(infoVm);
                    return RedirectToAction("ConfirmCifInfoForUpgrade");
                }

                return View();


            }
            catch (Exception ex)
            {
                log.Error(User.Identity.GetUserId(), controllerName, actionName, ex);
                return View("Error");
            }
        }

        public ActionResult ConfirmCifInfoForUpgrade()
        {
            TempData["createReturn"] = "1";
            CIFInfoVMForDeactivator reqmodel = new CIFInfoVMForDeactivator();
            try
            {
                if (TempData["createD"] == "1")
                {
                    if (Session["CIFVMForUpgrade"] != null)
                    {
                        if (!string.IsNullOrEmpty(Session["CIFVMForUpgrade"].ToString()))
                        {
                            reqmodel = JsonConvert.DeserializeObject<CIFInfoVMForDeactivator>(Session["CIFVMForUpgrade"].ToString());
                        }
                    }
                }


                string userID = User.Identity.GetUserId();
                ViewBag.Emaillist = CIFInfoModelsController.GetApproverEmailList(userID);
                reqmodel.UserEmail = (from s in db.Users where s.Id == userID && s.DEL_FLAG == false select s.Email).SingleOrDefault();



            }
            catch (Exception ex)
            { throw ex; }
            return View(reqmodel);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ConfirmCifInfoForUpgrade(CIFInfoVMForDeactivator reqVM)
        {
            try
            {
                Session["CIFVMForUpgrade"] = string.Empty;
                if (ModelState.IsValid)
                {
                    #region Data preparation
                    var DbInfo = (from s in db.CIFInfoModels where s.ID == reqVM.ID && s.DELFLAG == false select s).SingleOrDefault();
                    DbInfo.UPDATEDUSERID = User.Identity.GetUserId();
                    DbInfo.UpdatedDate = DateTime.Now;
                    //update approve status
                    DbInfo.ApproverEmail = reqVM.ApproverEmail;
                    DbInfo.UserEmail = reqVM.UserEmail;
                    DbInfo.UpgradeStatus = 1;
                    //create new user
                    //CIFInfoModel new_user = new CIFInfoModel();
                    //new_user.ID = reqVM.ID;
                    //new_user.CIFID = reqVM.CIFID;
                    //new_user.NAME = reqVM.NAME;
                    //new_user.NRC = reqVM.NRC;
                    //new_user.USERTYPE = reqVM.USERTYPE;
                    //new_user.USERTYPECODE = reqVM.USERTYPECODE;
                    //new_user.ADDRESS = reqVM.Address;
                    //new_user.PHONENO = reqVM.PHONENO;
                    //DateTime expdate = DateTime.Now;
                    //DateTime effecitvedate = DateTime.Now;
                    //var dd = reqVM.strEffectiveDate.Replace("/", "-");
                    //var deactivate = reqVM.strDeactivateDate.Replace("/", "-");
                    //var ddexp = reqVM.strEXPIREDATE.Replace("/", "-");
                    //string addday = "01-" + dd;
                    //string adddayexp = "01-" + ddexp;
                    //expdate = General.ConvertStrToDateForIconic(adddayexp);
                    //effecitvedate = General.ConvertStrToDateForIconic(addday);
                    //new_user.EXPIREDATE = expdate;
                    //new_user.EFFECTIVEDATE = effecitvedate;
                    //new_user.DeactivateDate = General.ConvertStrToDate(deactivate);
                    //new_user.BRANCHNAME = reqVM.BranchName;
                    //new_user.RMID = reqVM.RMID;
                    //new_user.RMName = reqVM.RMName;
                    //new_user.DeactivateStatus = 1;//Request
                    //new_user.Status = 1;//Request
                    //new_user.ApproverEmail = reqVM.ApproverEmail;
                    //new_user.UserEmail = reqVM.UserEmail;
                    //new_user.UpdatedDate = DateTime.Now;
                    //new_user.UPDATEDUSERID = User.Identity.GetUserId();
                    #endregion

                    var localEntity = db.Set<CIFInfoModel>().Local.FirstOrDefault(f => f.ID == DbInfo.ID);
                    if (localEntity != null)
                    {
                        db.Entry(localEntity).State = EntityState.Detached;
                    }
                    // save log
                    string controllerName = "CIFInfoDeactivate";
                    string getuserid = User.Identity.GetUserId();
                    db.Entry(DbInfo).State = EntityState.Modified;
                    try
                    {
                        db.SaveChanges();
                    }
                    catch (DbEntityValidationException ex)
                    {
                        foreach (var eve in ex.EntityValidationErrors)
                        {
                            log.Info(getuserid, controllerName, "CIF_ConfirmPageForDeactivate", 2, eve.Entry.Entity.GetType().Name);
                            foreach (var ve in eve.ValidationErrors)
                            {
                                log.Info(getuserid, controllerName, "CIF_ConfirmPageForDeactivate", 2, ve.ErrorMessage);
                            }
                        }
                        throw;
                    }

                    //save log
                    ViewBag.CifCreateInfo = "\"" + reqVM.CIFID + "\"";
                    var getBranch = (from s in db.Users where s.Id == getuserid && s.DEL_FLAG == false select s).SingleOrDefault();
                    int branchid = getBranch.BranchID;
                    IEnumerable<SelectListItem> items2 = db.Users.Where(b => b.DEL_FLAG == false && b.BranchID == branchid && b.Email != null && b.Role == 3)
                                    .Select(c => new SelectListItem
                                    {
                                        Selected = (c.Email == reqVM.ApproverEmail),
                                        Value = c.Email.ToString(),
                                        Text = c.Email
                                    }).ToList();

                    ViewBag.Emaillist = items2;
                    List<string> mailList = new List<string>();
                    mailList.Add(reqVM.UserEmail);
                    mailList.Add(reqVM.ApproverEmail);
                    #region sendEmail
                    bool sendEmail = CIFInfoModelsController.SendEmailForIconic(mailList, reqVM.CIFID, getuserid, controllerName, "ConfirmCifInfoForUpgrade");
                    #endregion
                    return View(reqVM);
                }

            }
            catch (Exception ex)
            { throw ex; }
            return View();
        }

        #endregion
    }
}
