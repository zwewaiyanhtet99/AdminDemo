@model ABankAdmin.ViewModels.UtilitySearchViewModel

@{
    ViewBag.Title = "Utility";
}

<link rel="stylesheet" href="~/Content/TabStyle.css">

<div class="row">
    <div class="col-md-4">
        <h3>Utility Payment Report</h3>
    </div>
</div>

<div class="panel with-nav-tabs panel-default">
    <div class="panel-heading">
        <ul class="nav nav-tabs">
            <li class="active"><a href="#tabRetail" data-toggle="tab">Retail</a></li>
            <li><a href="#tabCorporate" data-toggle="tab">Corporate</a></li>
        </ul>
    </div>
    <div class="panel-body">
        <div class="tab-content">
            <div class="tab-pane fade in active" id="tabRetail">
                Retail content
                <form id="frmRetailUtility" action="/Report/Utility" method="post">
                    <div class="row">
                        <input data-val="true" id="R_IsCorporate" name="IsCorporate" type="hidden" value="false" />

                        @*corporate search data*@
                        @Html.HiddenFor(m => m.CorporateSearch.BranchCode)
                        @Html.HiddenFor(m => m.CorporateSearch.TranType)
                        @Html.HiddenFor(m => m.CorporateSearch.DebitOrCredit)
                        @Html.HiddenFor(m => m.CorporateSearch.UtilityType)
                        @Html.HiddenFor(m => m.CorporateSearch.FromDate)
                        @Html.HiddenFor(m => m.CorporateSearch.ToDate)
                        @Html.HiddenFor(m => m.CorporateSearch.Company_Name)
                        @Html.HiddenFor(m => m.CorporateSearch.UserType)

                        @if (ViewBag.BranchList != null)
                        {
                            <div class="col-md-2">
                                @Html.DropDownListFor(m => m.RetailSearch.BranchCode,
                                (IEnumerable<SelectListItem>)ViewBag.BranchList,
                                "All", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.RetailSearch.BranchCode, "", new { @class = "text-danger" })
                            </div>
                        }
                        @if (ViewBag.UserTypeList != null)
                        {
                            <div class="col-md-2">
                                @Html.DropDownListFor(model => model.RetailSearch.UserType, (IEnumerable<SelectListItem>)ViewBag.UserTypeList, null, new { @class = "form-control col-md-2" })
                                @Html.ValidationMessageFor(model => model.RetailSearch.UserType, "", new { @class = "text-danger" })
                            </div>
                        }
                        @if (ViewBag.Billerlist != null)
                        {
                            <div class="col-md-2">
                                @Html.DropDownListFor(model => model.RetailSearch.UtilityType, (IEnumerable<SelectListItem>)ViewBag.Billerlist,null, new { @class = "form-control col-md-2" })
                                @Html.ValidationMessageFor(model => model.RetailSearch.UtilityType, "", new { @class = "text-danger" })
                            </div>
                        }
                        <div class="form-group col-md-2">
                            <div class="input-group date" id='fromDate'>
                                @Html.TextBoxFor(model => model.RetailSearch.FromDate, new { @class = "form-control", placeholder = "From Date", autocomplete = "off", onkeydown = "event.preventDefault()" })
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.RetailSearch.FromDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-2">
                            <div class="input-group date" id='toDate'>
                                @Html.TextBoxFor(model => model.RetailSearch.ToDate, new { @class = "form-control", placeholder = "To Date", autocomplete = "off", onkeydown = "event.preventDefault()" })
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.RetailSearch.ToDate, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-2">
                            <input type="button" class="btn btn-default col-md-offset-0" value="View" onclick="retailDateValidation()">
                        </div>
                    </div>
                </form>
                <div class="row">
                    <iframe id="ifrmRetailReportViewer" frameborder="0" width="100%" height="410" style="overflow:hidden;" scrolling="no"></iframe>
                </div>
            </div>
            <div class="tab-pane fade" id="tabCorporate">
                Corporate content
                <form id="frmCorporateUtility" action="/Report/Utility" method="post">
                    <div class="row">
                        <input data-val="true" id="C_IsCorporate" name="IsCorporate" type="hidden" value="true" />

                        @*corporate search data*@
                        @Html.HiddenFor(m => m.RetailSearch.BranchCode)
                        @Html.HiddenFor(m => m.RetailSearch.TranType)
                        @Html.HiddenFor(m => m.RetailSearch.DebitOrCredit)
                        @Html.HiddenFor(m => m.RetailSearch.UtilityType)
                        @Html.HiddenFor(m => m.RetailSearch.FromDate)
                        @Html.HiddenFor(m => m.RetailSearch.ToDate)
                        @Html.HiddenFor(m => m.RetailSearch.UserType)
                        @if (ViewBag.BranchList != null)
                        {
                            <div class="col-md-2">
                                @Html.DropDownListFor(m => m.CorporateSearch.BranchCode,
                                (IEnumerable<SelectListItem>)ViewBag.BranchList,
                                "All", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CorporateSearch.BranchCode, "", new { @class = "text-danger" })
                            </div>
                        }
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.CorporateSearch.Company_Name, new { @class = "form-control", placeholder = "Company Name" })
                        </div>
                        @if (ViewBag.CorUserTypeList != null)
                        {
                            <div class="col-md-2">
                                @Html.DropDownListFor(model => model.CorporateSearch.UserType, (IEnumerable<SelectListItem>)ViewBag.CorUserTypeList,null, new { @class = "form-control col-md-2",@id="CorporateSearchUserType" })
                                @Html.ValidationMessageFor(model => model.CorporateSearch.UserType, "", new { @class = "text-danger" })
                            </div>
                        }
                        @if (ViewBag.BillerList != null)
                        {
                            <div class="col-md-2">
                                @Html.DropDownListFor(model => model.CorporateSearch.UtilityType, (IEnumerable<SelectListItem>)ViewBag.BillerList,null, new { @class = "form-control col-md-2",@id="CorporateSearchUtilityType" })
                                @Html.ValidationMessageFor(model => model.CorporateSearch.UtilityType, "", new { @class = "text-danger" })
                            </div>
                        }
                        <div class="form-group col-md-2">
                            <div class="input-group date" id='fromDate'>
                                @Html.TextBoxFor(model => model.CorporateSearch.FromDate, new { @class = "form-control", placeholder = "From Date", autocomplete = "off", @id = "CorporateSearchFromDate", onkeydown = "event.preventDefault()" })
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.CorporateSearch.FromDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-2">
                            <div class="input-group date" id='toDate'>
                                @Html.TextBoxFor(model => model.CorporateSearch.ToDate, new { @class = "form-control", placeholder = "To Date", autocomplete = "off", @id = "CorporateSearchToDate", onkeydown = "event.preventDefault()" })
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.CorporateSearch.ToDate, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-2">
                            <input type="button" class="btn btn-default col-md-offset-0" value="View" onclick="corporateDateValidation()">
                        </div>
                    </div>
                </form>
                <div class="row">
                    <iframe id="ifrmCorporateReportViewer" frameborder="0" width="100%" height="410" style="overflow:hidden;" scrolling="no"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

@*<div class="row">
        <iframe id="ifrmReportViewer" frameborder="0" width="100%" height="410" style="overflow:hidden;" scrolling="no"></iframe>
    </div>*@

<!--Date Validation Message Box-->
<div class="modal modal-danger" id="divDateValidate">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Date Validation Error</h4>
            </div>
            <div class="modal-body">
                <p id="errorMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline pull-left" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@section Scripts{
    <script src="~/Scripts/bootstrap-datepicker.min.js"></script>
    <script>
            $(function () {


                $("#fromDate,#toDate").datetimepicker({
                 format: 'DD-MM-YYYY'
                 });

               //to show selected tab (corporate tab)
                @if(Model.IsCorporate & Model.UtilityVM != null)
                  {
                   <text>$('.nav-tabs a[href="#tabCorporate"]').tab('show');</text>

                    <text>ShowCorporateReport();</text>
                  }

                @if(!Model.IsCorporate & Model.UtilityVM != null)
                {
                    <text>ShowReport();</text>
                }
            });

            //function submit() {
            //    $("#frmRetailUtility").submit();
            //    $("#frmCorporateUtility").submit();
            //}

        function retailDateValidation() {
            var start = $('#RetailSearch_FromDate').val().split("-");
            var from = new Date(start[2], start[1] - 1, start[0])//Date.parse(start);
            var end = $('#RetailSearch_ToDate').val().split("-");
            var to = new Date(end[2], end[1] - 1, end[0])// Date.parse(end);
            if (from > to) {
                $("#errorMessage").text("To Date must be greater than From Date!");
                $("#divDateValidate").modal('toggle');
            }
            else
            {
               $("#frmRetailUtility").submit();
            }
        }

        function corporateDateValidation() {
            //for corporate date validation
            var c_start = $('#CorporateSearchFromDate').val().split("-");
            var c_from = new Date(c_start[2], c_start[1] - 1, c_start[0])//Date.parse(start);
            var c_end = $('#CorporateSearchToDate').val().split("-");
            var c_to = new Date(c_end[2], c_end[1] - 1, c_end[0])// Date.parse(end);
            if (c_from > c_to) {
                $("#errorMessage").text("To Date must be greater than From Date!");
                $("#divDateValidate").modal('toggle');
            }
            else
            {
                $("#frmCorporateUtility").submit();
            }
        }

        //for retail utility report
        function ShowReport() {
            var url = "../RDLCReports/Aspx/UtilityReport.aspx";

            var myframe = document.getElementById("ifrmRetailReportViewer");
            if (myframe !== null) {
                if (myframe.src) {
                    myframe.src = url;
                }
                else if (myframe.contentWindow !== null && myframe.contentWindow.location !== null) {
                    myframe.contentWindow.location = url;
                }
                else { myframe.setAttribute('src', url); }
            }

            return false;
        }
        //for corporate utility report
        function ShowCorporateReport() {
            var url = "../RDLCReports/Aspx/C_UtilityReport.aspx";

            var myframe = document.getElementById("ifrmCorporateReportViewer");
            if (myframe !== null) {
                if (myframe.src) {
                    myframe.src = url;
                }
                else if (myframe.contentWindow !== null && myframe.contentWindow.location !== null) {
                    myframe.contentWindow.location = url;
                }
                else { myframe.setAttribute('src', url); }
            }

            return false;
        }

        //For Corporate
        $(document).ready(function () {
            //to bind Branch ddl

            $("#RetailSearch_UserType").change(function () {
                $("#RetailSearch_UtilityType").empty();
                if ($("#RetailSearch_UserType").val() != "") {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("getBillerType")',
                        dataType: 'json',
                        data: { usertype: $("#RetailSearch_UserType").val() },
                        success: function (biller) {

                            $.each(biller, function (i, biller) {
                                $("#RetailSearch_UtilityType").append('<option value="'
                                    + biller.Value + '">'
                                    + biller.Text + '</option>');
                            });
                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }
                    });
                    return false;
                }
                else {
                    $("#RetailSearch_UtilityType").append('<option value="'
                        + "" + '">'
                        + "---Select Biller Type---" + '</option>');
                }
            });


           $("#CorporateSearchUserType").change(function () {
               $("#CorporateSearchUtilityType").empty();
               if ($("#CorporateSearchUserType option:selected").val() != "") {
                   $.ajax({
                       type: 'POST',
                       url: '@Url.Action("getBillerType")',
                       dataType: 'json',
                       data: { usertype: $("#CorporateSearchUserType option:selected").val() },
                       success: function (corbiller) {

                           $.each(corbiller, function (i, corbiller) {
                               $("#CorporateSearchUtilityType").append('<option value="'
                                   + corbiller.Value + '">'
                                   + corbiller.Text + '</option>');
                           });
                       },
                       error: function (ex) {
                           alert('Failed.' + ex);
                       }
                   });
                   return false;
               }
               else {
                   $("#CorporateSearchUtilityType").append('<option value="'
                       + ""+ '">'
                       + "---Select Biller Type---"+ '</option>');
               }
           });

            var UserType = $("#RetailSearch_UserType  option:selected").val();
            if ($("#RetailSearch_UserType  option:selected").val() != "") {
                $("#RetailSearch_UtilityType").empty();
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("getBillerType")',
                        dataType: 'json',
                        data: { usertype: $("#RetailSearch_UserType  option:selected").val() },
                        success: function (biller) {

                            $.each(biller, function (i, biller) {
                                $("#RetailSearch_UtilityType").append('<option value="'
                                    + biller.Value + '">'
                                    + biller.Text + '</option>');
                            });
                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }
                    });
                    return false;
            }

            if ($("#CorporateSearchUserType option:selected").val() != "") {
                $("#CorporateSearchUtilityType").empty();
                   $.ajax({
                       type: 'POST',
                       url: '@Url.Action("getBillerType")',
                       dataType: 'json',
                       data: { usertype: $("#CorporateSearchUserType option:selected").val() },
                       success: function (corbiller) {

                           $.each(corbiller, function (i, corbiller) {
                               $("#CorporateSearchUtilityType").append('<option value="'
                                   + corbiller.Value + '">'
                                   + corbiller.Text + '</option>');
                           });
                       },
                       error: function (ex) {
                           alert('Failed.' + ex);
                       }
                   });
                   return false;
               }

        });

    </script>
}

