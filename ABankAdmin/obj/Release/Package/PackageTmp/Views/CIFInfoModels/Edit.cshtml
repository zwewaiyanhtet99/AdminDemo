@model ABankAdmin.ViewModels.CIFInfoEdit

@{

    ViewBag.Title = "Edit";
}
<style>
    .table-wrapper {
        position: relative;
        max-height: 450px;
        overflow: auto;
    }

    thead tr th {
        text-align: center;
    }
</style>
@using (Html.BeginForm("Edit", "CIFInfoModels", FormMethod.Post, new { @class = "form-horizontal", role = "form", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()

    <div class="">
        <h4>Edit THE ICONIC</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.uservm.ID)

        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.CIFID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uservm.CIFID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.uservm.CIFID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.USERTYPECODE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="usertypelist">
                @*@Html.DropDownListFor(model => model.uservm.USERTYPECODE,
                 (IEnumerable<SelectListItem>)ViewBag.UserTypelist,
                 null, new { @class = "form-control", @id = "getusertypelist", @readonly = "readonly" })*@
                @Html.EditorFor(model => model.uservm.USERTYPE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })


                @Html.HiddenFor(model => model.uservm.USERTYPECODE, new { @id = "usertype" })
                @Html.ValidationMessageFor(model => model.uservm.USERTYPECODE, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.NAME, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uservm.NAME, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.uservm.NAME, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.PHONENO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uservm.PHONENO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.uservm.PHONENO, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.NRC, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uservm.NRC, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.uservm.NRC, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.Address, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.uservm.Address, new {@class = "form-control", @readonly = "readonly"})
                @Html.ValidationMessageFor(model => model.uservm.Address, "", new {@class = "text-danger"})
            </div>
        </div>
        
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.strEffectiveDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class='input-group date' id="Effectivedate">
                    @Html.TextBoxFor(model => model.uservm.strEffectiveDate, new { @class = "form-control", placeholder = "Effective Date", autocomplete = "off", id = "effectDate", @readonly = "readonly" })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.uservm.strEffectiveDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.strEXPIREDATE, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                <div class='input-group date' id="expdate">
                    @Html.TextBoxFor(model => model.uservm.strEXPIREDATE, new {@class = "form-control", placeholder = "Expire Date", autocomplete = "off", id = "Expireddate"})
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.uservm.EXPIREDATE, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.REMARK, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uservm.REMARK, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.uservm.REMARK, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(model => model.uservm.BranchName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.uservm.BranchName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.uservm.BranchName, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr style="display:block" />
        <div id="acc" class="row">
        </div>
        <div id="acc" class="row">
            <div style="width:auto" class="container">
                <h4><b>Accounts</b></h4>
                <div class="table-responsive table-wrapper">
                    <table class="table table-bordered">
                        <thead class="bg-gray">
                            <tr>
                                <th>No.</th>
                                <th>Account No</th>  @*style="width:250px;"*@
                                <th>Account Type</th>
                                <th>Schema Code</th>
                                <th>Branch</th>
                                <th>Available Amount</th>
                                <th>Currency</th> @*style="width:150px;"*@

                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.accountvms != null)
                            {
                                for (int i = 0; i < Model.accountvms.Count(); i++)
                                {
                                    @*@Html.HiddenFor(x => Model.accountvms[i].ID)*@
                                    <tr>
                                        <td width="50" style="text-align:center">@(i + 1)</td>
                                        <td>
                                            @Html.EditorFor(x => Model.accountvms[i].AccountNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </td>
                                        <td>
                                            @Html.EditorFor(x => Model.accountvms[i].AccountType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </td>
                                        <td>
                                            @Html.EditorFor(x => Model.accountvms[i].Schm_Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </td>
                                        <td>
                                            @Html.EditorFor(x => Model.accountvms[i].BranchID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </td>
                                        <td>
                                            @Html.EditorFor(x => Model.accountvms[i].AvailableAmt, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </td>
                                        <td>
                                            @Html.EditorFor(x => Model.accountvms[i].Currency, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </td>


                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <br />
        <div class="form-group" style="padding-left:35px;">
            @*<div class="col-md-offset-2 col-md-10">*@
            <input type="submit" value="Save" class="btn btn-success" />
            @Html.ActionLink("Cancel", "Index", null, new
       { @*href = Request.UrlReferrer,*@ @class = "btn btn-default"
       })
            @*</div>*@
        </div>

    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/bootstrap-datepicker.min.js"></script>
    <script>
        $('#getusertypelist').on('change', function () {
            if (this.value != null) {

                $('#usertype').val($("#getusertypelist option:selected").text());
            }
        });
        $(function() {
            $("#expdate").datetimepicker({
                format: 'MM/YY'
            });
        });
        $(function () {
            $("#Effectivedate").datetimepicker({
                format: 'MM/YY'

            });
        });
    </script>
}